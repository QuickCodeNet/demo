//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.EmailManagerModule.Domain.Entities;
using QuickCode.Demo.EmailManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.EmailManagerModule.Persistence.Contexts;
using QuickCode.Demo.EmailManagerModule.Application.Dtos.EmailSender;
using QuickCode.Demo.EmailManagerModule.Application.Mappings;
using QuickCode.Demo.EmailManagerModule.Persistence.Sql;

namespace QuickCode.Demo.EmailManagerModule.Persistence.Repositories
{
    public partial class EmailSenderRepository : BaseRepository, IEmailSenderRepository
    {
        public async Task<RepoResponse<List<GetInfoMessagesForEmailSendersResponseDto>>> GetInfoMessagesForEmailSendersAsync(int emailSendersId)
        {
            return await ExecuteWithExceptionHandling("GetInfoMessagesForEmailSenders", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.EmailSender.Query.GetInfoMessagesForEmailSenders);
                var parameters = new
                {
                    PRM_EMAIL_SENDERS_ID = emailSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetInfoMessagesForEmailSendersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in EmailSender");
            });
        }

        public async Task<RepoResponse<GetInfoMessagesForEmailSendersResponseDto>> GetInfoMessagesForEmailSendersDetailsAsync(int emailSendersId, int infoMessagesId)
        {
            return await ExecuteWithExceptionHandling("GetInfoMessagesForEmailSendersDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.EmailSender.Query.GetInfoMessagesForEmailSendersDetails);
                var parameters = new
                {
                    PRM_INFO_MESSAGES_ID = infoMessagesId,
                    PRM_EMAIL_SENDERS_ID = emailSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetInfoMessagesForEmailSendersResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in EmailSender");
            });
        }

        public async Task<RepoResponse<List<GetOtpMessagesForEmailSendersResponseDto>>> GetOtpMessagesForEmailSendersAsync(int emailSendersId)
        {
            return await ExecuteWithExceptionHandling("GetOtpMessagesForEmailSenders", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.EmailSender.Query.GetOtpMessagesForEmailSenders);
                var parameters = new
                {
                    PRM_EMAIL_SENDERS_ID = emailSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetOtpMessagesForEmailSendersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in EmailSender");
            });
        }

        public async Task<RepoResponse<GetOtpMessagesForEmailSendersResponseDto>> GetOtpMessagesForEmailSendersDetailsAsync(int emailSendersId, int otpMessagesId)
        {
            return await ExecuteWithExceptionHandling("GetOtpMessagesForEmailSendersDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.EmailSender.Query.GetOtpMessagesForEmailSendersDetails);
                var parameters = new
                {
                    PRM_OTP_MESSAGES_ID = otpMessagesId,
                    PRM_EMAIL_SENDERS_ID = emailSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetOtpMessagesForEmailSendersResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in EmailSender");
            });
        }

        public async Task<RepoResponse<List<GetCampaignMessagesForEmailSendersResponseDto>>> GetCampaignMessagesForEmailSendersAsync(int emailSendersId)
        {
            return await ExecuteWithExceptionHandling("GetCampaignMessagesForEmailSenders", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.EmailSender.Query.GetCampaignMessagesForEmailSenders);
                var parameters = new
                {
                    PRM_EMAIL_SENDERS_ID = emailSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetCampaignMessagesForEmailSendersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in EmailSender");
            });
        }

        public async Task<RepoResponse<GetCampaignMessagesForEmailSendersResponseDto>> GetCampaignMessagesForEmailSendersDetailsAsync(int emailSendersId, int campaignMessagesId)
        {
            return await ExecuteWithExceptionHandling("GetCampaignMessagesForEmailSendersDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.EmailSender.Query.GetCampaignMessagesForEmailSendersDetails);
                var parameters = new
                {
                    PRM_CAMPAIGN_MESSAGES_ID = campaignMessagesId,
                    PRM_EMAIL_SENDERS_ID = emailSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetCampaignMessagesForEmailSendersResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in EmailSender");
            });
        }
    }
}