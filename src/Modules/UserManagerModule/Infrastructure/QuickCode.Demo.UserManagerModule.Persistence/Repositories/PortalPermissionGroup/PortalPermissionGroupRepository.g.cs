//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.UserManagerModule.Domain.Entities;
using QuickCode.Demo.UserManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.UserManagerModule.Persistence.Contexts;
using QuickCode.Demo.UserManagerModule.Application.Dtos.PortalPermissionGroup;
using QuickCode.Demo.UserManagerModule.Application.Mappings;
using QuickCode.Demo.UserManagerModule.Domain.Enums;

namespace QuickCode.Demo.UserManagerModule.Persistence.Repositories
{
    public partial class PortalPermissionGroupRepository : BaseRepository, IPortalPermissionGroupRepository
    {
        private readonly WriteDbContext _writeContext;
        private readonly ReadDbContext _readContext;
        public PortalPermissionGroupRepository(ILogger<PortalPermissionGroupRepository> logger, WriteDbContext writeContext, ReadDbContext readContext) : base(logger, "PortalPermissionGroup")
        {
            _writeContext = writeContext;
            _readContext = readContext;
        }

        public async Task<RepoResponse<PortalPermissionGroupDto>> InsertAsync(PortalPermissionGroupDto value)
        {
            return await ExecuteWithExceptionHandling("Insert", async () =>
            {
                var entity = value.ToModel();
                await _writeContext.PortalPermissionGroup.AddAsync(entity);
                await _writeContext.SaveChangesAsync();
                var resultDto = entity.ToDto();
                return new RepoResponse<PortalPermissionGroupDto>(resultDto, "Success");
            });
        }

        public async Task<RepoResponse<bool>> UpdateAsync(PortalPermissionGroupDto value)
        {
            return await ExecuteWithExceptionHandling("Update", async () =>
            {
                _writeContext.Set<Domain.Entities.PortalPermissionGroup>().Update(value.ToModel());
                await _writeContext.SaveChangesAsync();
                return new RepoResponse<bool>(true, "Success");
            });
        }

        public async Task<RepoResponse<bool>> DeleteAsync(PortalPermissionGroupDto value)
        {
            return await ExecuteWithExceptionHandling("Delete", async () =>
            {
                _writeContext.PortalPermissionGroup.Remove(value.ToModel());
                await _writeContext.SaveChangesAsync();
                return new RepoResponse<bool>(true, "Success");
            });
        }

        public async Task<RepoResponse<PortalPermissionGroupDto>> GetByPkAsync(string portalPermissionName, string permissionGroupName, int portalPermissionTypeId)
        {
            return await ExecuteWithExceptionHandling("GetByPk", async () =>
            {
                var result =
                    from portal_permission_group in _readContext.PortalPermissionGroup
                    where portal_permission_group.PortalPermissionName.Equals(portalPermissionName) && portal_permission_group.PermissionGroupName.Equals(permissionGroupName) && portal_permission_group.PortalPermissionTypeId.Equals(portalPermissionTypeId)
                    select portal_permission_group;
                var response = await result.FirstOrDefaultAsync();
                return response == null ? new RepoResponse<PortalPermissionGroupDto>
                {
                    Code = 404,
                    Message = "Not found in PortalPermissionGroup"
                }

                : new RepoResponse<PortalPermissionGroupDto>(response.ToDto(), "Success");
            });
        }

        public async Task<RepoResponse<List<PortalPermissionGroupDto>>> ListAsync(int? pageNumber = null, int? pageSize = null)
        {
            return await ExecuteWithExceptionHandling("Select", async () =>
            {
                if (pageNumber.HasValue && pageNumber < ConfigurationConstants.MinPageNumber)
                {
                    return new RepoResponse<List<PortalPermissionGroupDto>>
                    {
                        Code = 404,
                        Message = $"Page Number must be greater than {ConfigurationConstants.MinPageNumber}"};
                }

                var query = _readContext.PortalPermissionGroup.OrderBy(o => o.PortalPermissionName).ThenBy(o => o.PermissionGroupName).ThenBy(o => o.PortalPermissionTypeId).AsQueryable();
                if (pageNumber.HasValue && pageSize.HasValue)
                {
                    query = ApplyPagination(query, pageNumber.Value, pageSize.Value);
                }

                var result = await query.ToListAsync();
                return new RepoResponse<List<PortalPermissionGroupDto>>(result.ToDto(), "Success");
            });
        }

        public async Task<RepoResponse<int>> CountAsync()
        {
            return await ExecuteWithExceptionHandling("Count", async () =>
            {
                return new RepoResponse<int>(await _readContext.PortalPermissionGroup.CountAsync(), "Success");
            });
        }
    }
}