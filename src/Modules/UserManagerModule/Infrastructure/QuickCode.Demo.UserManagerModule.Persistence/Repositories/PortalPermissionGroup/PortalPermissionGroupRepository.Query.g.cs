//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.UserManagerModule.Domain.Entities;
using QuickCode.Demo.UserManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.UserManagerModule.Persistence.Contexts;
using QuickCode.Demo.UserManagerModule.Application.Dtos.PortalPermissionGroup;
using QuickCode.Demo.UserManagerModule.Application.Mappings;
using QuickCode.Demo.UserManagerModule.Persistence.Sql;
using QuickCode.Demo.UserManagerModule.Domain.Enums;

namespace QuickCode.Demo.UserManagerModule.Persistence.Repositories
{
    public partial class PortalPermissionGroupRepository : BaseRepository, IPortalPermissionGroupRepository
    {
        public async Task<RepoResponse<List<GetPortalPermissionGroupsResponseDto>>> GetPortalPermissionGroupsAsync(string portalPermissionGroupsPermissionGroupName)
        {
            return await ExecuteWithExceptionHandling("GetPortalPermissionGroups", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PortalPermissionGroup.Query.GetPortalPermissionGroups);
                var parameters = new
                {
                    PRM_PortalPermissionGroups_PermissionGroupName = portalPermissionGroupsPermissionGroupName
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetPortalPermissionGroupsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PortalPermissionGroup");
            });
        }

        public async Task<RepoResponse<List<GetPortalPermissionGroupResponseDto>>> GetPortalPermissionGroupAsync(string portalPermissionGroupsPortalPermissionName, string portalPermissionGroupsPermissionGroupName, int portalPermissionGroupsPortalPermissionTypeId)
        {
            return await ExecuteWithExceptionHandling("GetPortalPermissionGroup", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PortalPermissionGroup.Query.GetPortalPermissionGroup);
                var parameters = new
                {
                    PRM_PortalPermissionGroups_PortalPermissionName = portalPermissionGroupsPortalPermissionName,
                    PRM_PortalPermissionGroups_PermissionGroupName = portalPermissionGroupsPermissionGroupName,
                    PRM_PortalPermissionGroups_PortalPermissionTypeId = portalPermissionGroupsPortalPermissionTypeId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetPortalPermissionGroupResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PortalPermissionGroup");
            });
        }
    }
}