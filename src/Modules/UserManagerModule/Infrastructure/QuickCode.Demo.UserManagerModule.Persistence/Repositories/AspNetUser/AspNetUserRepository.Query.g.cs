//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.UserManagerModule.Domain.Entities;
using QuickCode.Demo.UserManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.UserManagerModule.Persistence.Contexts;
using QuickCode.Demo.UserManagerModule.Application.Dtos.AspNetUser;
using QuickCode.Demo.UserManagerModule.Application.Mappings;
using QuickCode.Demo.UserManagerModule.Persistence.Sql;
using QuickCode.Demo.UserManagerModule.Domain.Enums;

namespace QuickCode.Demo.UserManagerModule.Persistence.Repositories
{
    public partial class AspNetUserRepository : BaseRepository, IAspNetUserRepository
    {
        public async Task<RepoResponse<GetUserResponseDto>> GetUserAsync(string? aspNetUsersEmail)
        {
            return await ExecuteWithExceptionHandling("GetUser", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.AspNetUser.Query.GetUser);
                var parameters = new
                {
                    PRM_AspNetUsers_Email = aspNetUsersEmail
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetUserResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in AspNetUser");
            });
        }

        public async Task<RepoResponse<List<GetAspNetUserRolesForAspNetUsersResponseDto>>> GetAspNetUserRolesForAspNetUsersAsync(string aspNetUsersId)
        {
            return await ExecuteWithExceptionHandling("GetAspNetUserRolesForAspNetUsers", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.AspNetUser.Query.GetAspNetUserRolesForAspNetUsers);
                var parameters = new
                {
                    PRM_AspNetUsers_Id = aspNetUsersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetAspNetUserRolesForAspNetUsersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in AspNetUser");
            });
        }

        public async Task<RepoResponse<GetAspNetUserRolesForAspNetUsersResponseDto>> GetAspNetUserRolesForAspNetUsersDetailsAsync(string aspNetUsersId, string aspNetUserRolesUserId)
        {
            return await ExecuteWithExceptionHandling("GetAspNetUserRolesForAspNetUsersDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.AspNetUser.Query.GetAspNetUserRolesForAspNetUsersDetails);
                var parameters = new
                {
                    PRM_AspNetUserRoles_UserId = aspNetUserRolesUserId,
                    PRM_AspNetUsers_Id = aspNetUsersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetAspNetUserRolesForAspNetUsersResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in AspNetUser");
            });
        }

        public async Task<RepoResponse<List<GetAspNetUserClaimsForAspNetUsersResponseDto>>> GetAspNetUserClaimsForAspNetUsersAsync(string aspNetUsersId)
        {
            return await ExecuteWithExceptionHandling("GetAspNetUserClaimsForAspNetUsers", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.AspNetUser.Query.GetAspNetUserClaimsForAspNetUsers);
                var parameters = new
                {
                    PRM_AspNetUsers_Id = aspNetUsersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetAspNetUserClaimsForAspNetUsersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in AspNetUser");
            });
        }

        public async Task<RepoResponse<GetAspNetUserClaimsForAspNetUsersResponseDto>> GetAspNetUserClaimsForAspNetUsersDetailsAsync(string aspNetUsersId, int aspNetUserClaimsId)
        {
            return await ExecuteWithExceptionHandling("GetAspNetUserClaimsForAspNetUsersDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.AspNetUser.Query.GetAspNetUserClaimsForAspNetUsersDetails);
                var parameters = new
                {
                    PRM_AspNetUserClaims_Id = aspNetUserClaimsId,
                    PRM_AspNetUsers_Id = aspNetUsersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetAspNetUserClaimsForAspNetUsersResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in AspNetUser");
            });
        }

        public async Task<RepoResponse<List<GetAspNetUserTokensForAspNetUsersResponseDto>>> GetAspNetUserTokensForAspNetUsersAsync(string aspNetUsersId)
        {
            return await ExecuteWithExceptionHandling("GetAspNetUserTokensForAspNetUsers", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.AspNetUser.Query.GetAspNetUserTokensForAspNetUsers);
                var parameters = new
                {
                    PRM_AspNetUsers_Id = aspNetUsersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetAspNetUserTokensForAspNetUsersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in AspNetUser");
            });
        }

        public async Task<RepoResponse<GetAspNetUserTokensForAspNetUsersResponseDto>> GetAspNetUserTokensForAspNetUsersDetailsAsync(string aspNetUsersId, string aspNetUserTokensUserId)
        {
            return await ExecuteWithExceptionHandling("GetAspNetUserTokensForAspNetUsersDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.AspNetUser.Query.GetAspNetUserTokensForAspNetUsersDetails);
                var parameters = new
                {
                    PRM_AspNetUserTokens_UserId = aspNetUserTokensUserId,
                    PRM_AspNetUsers_Id = aspNetUsersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetAspNetUserTokensForAspNetUsersResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in AspNetUser");
            });
        }

        public async Task<RepoResponse<List<GetAspNetUserLoginsForAspNetUsersResponseDto>>> GetAspNetUserLoginsForAspNetUsersAsync(string aspNetUsersId)
        {
            return await ExecuteWithExceptionHandling("GetAspNetUserLoginsForAspNetUsers", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.AspNetUser.Query.GetAspNetUserLoginsForAspNetUsers);
                var parameters = new
                {
                    PRM_AspNetUsers_Id = aspNetUsersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetAspNetUserLoginsForAspNetUsersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in AspNetUser");
            });
        }

        public async Task<RepoResponse<GetAspNetUserLoginsForAspNetUsersResponseDto>> GetAspNetUserLoginsForAspNetUsersDetailsAsync(string aspNetUsersId, string aspNetUserLoginsLoginProvider)
        {
            return await ExecuteWithExceptionHandling("GetAspNetUserLoginsForAspNetUsersDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.AspNetUser.Query.GetAspNetUserLoginsForAspNetUsersDetails);
                var parameters = new
                {
                    PRM_AspNetUserLogins_LoginProvider = aspNetUserLoginsLoginProvider,
                    PRM_AspNetUsers_Id = aspNetUsersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetAspNetUserLoginsForAspNetUsersResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in AspNetUser");
            });
        }

        public async Task<RepoResponse<List<GetRefreshTokensForAspNetUsersResponseDto>>> GetRefreshTokensForAspNetUsersAsync(string aspNetUsersId)
        {
            return await ExecuteWithExceptionHandling("GetRefreshTokensForAspNetUsers", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.AspNetUser.Query.GetRefreshTokensForAspNetUsers);
                var parameters = new
                {
                    PRM_AspNetUsers_Id = aspNetUsersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetRefreshTokensForAspNetUsersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in AspNetUser");
            });
        }

        public async Task<RepoResponse<GetRefreshTokensForAspNetUsersResponseDto>> GetRefreshTokensForAspNetUsersDetailsAsync(string aspNetUsersId, int refreshTokensId)
        {
            return await ExecuteWithExceptionHandling("GetRefreshTokensForAspNetUsersDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.AspNetUser.Query.GetRefreshTokensForAspNetUsersDetails);
                var parameters = new
                {
                    PRM_RefreshTokens_Id = refreshTokensId,
                    PRM_AspNetUsers_Id = aspNetUsersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetRefreshTokensForAspNetUsersResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in AspNetUser");
            });
        }
    }
}