// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;

#nullable disable

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class WriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ADDRESS");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("SITE_ID");

                    b.Property<int>("TotalFlats")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_FLATS")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("SiteId");

                    b.ToTable("APARTMENTS");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.ApartmentFeePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("APARTMENT_ID");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("FEE_AMOUNT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<int>("MonthId")
                        .HasColumnType("int")
                        .HasColumnName("MONTH_ID");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("SITE_ID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YEAR_ID");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MonthId");

                    b.HasIndex("SiteId");

                    b.HasIndex("YearId");

                    b.ToTable("APARTMENT_FEE_PLANS");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.CommonExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("APARTMENT_ID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("EXPENSE_AMOUNT");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EXPENSE_TYPE_ID");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<int>("MonthId")
                        .HasColumnType("int")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME");

                    b.Property<bool>("Paid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("PAID");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("PAID_AT");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PAYMENT_TYPE_ID");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("SITE_ID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YEAR_ID");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MonthId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SiteId");

                    b.HasIndex("YearId");

                    b.ToTable("COMMON_EXPENSES");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ADDRESS");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("IDENTITY_NUMBER");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME");

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PHONE");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("CONTACTS");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.ExpenseInstallment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("APARTMENT_ID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DUE_DATE");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("EXPENSE_ID");

                    b.Property<decimal>("InstallmentAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("INSTALLMENT_AMOUNT");

                    b.Property<int>("InstallmentNumber")
                        .HasColumnType("int")
                        .HasColumnName("INSTALLMENT_NUMBER");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("Paid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("PAID");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("PAID_AT");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PAYMENT_TYPE_ID");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("SITE_ID");

                    b.Property<int>("TotalInstallments")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_INSTALLMENTS");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SiteId");

                    b.ToTable("EXPENSE_INSTALLMENTS");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("EXPENSE_TYPES");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.FeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("FEE_TYPES");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Flat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("APARTMENT_ID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<string>("FlatNumber")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("FLAT_NUMBER");

                    b.Property<int?>("Floor")
                        .HasColumnType("int")
                        .HasColumnName("FLOOR");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("RoomCount")
                        .HasColumnType("int")
                        .HasColumnName("ROOM_COUNT");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("SITE_ID");

                    b.Property<int?>("SquareMeters")
                        .HasColumnType("int")
                        .HasColumnName("SQUARE_METERS");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("SiteId");

                    b.ToTable("FLATS");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.FlatContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("CONTACT_ID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("END_DATE");

                    b.Property<int>("FlatId")
                        .HasColumnType("int")
                        .HasColumnName("FLAT_ID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("RELATIONSHIP_TYPE");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("START_DATE");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("FlatId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("FLAT_CONTACTS");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.FlatExpenseInstallment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("APARTMENT_ID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DUE_DATE");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("EXPENSE_ID");

                    b.Property<int>("ExpenseInstallmentId")
                        .HasColumnType("int")
                        .HasColumnName("EXPENSE_INSTALLMENT_ID");

                    b.Property<int>("FlatId")
                        .HasColumnType("int")
                        .HasColumnName("FLAT_ID");

                    b.Property<decimal>("FlatInstallmentAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("FLAT_INSTALLMENT_AMOUNT");

                    b.Property<int>("FlatInstallmentNumber")
                        .HasColumnType("int")
                        .HasColumnName("FLAT_INSTALLMENT_NUMBER");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("Paid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("PAID");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("PAID_AT");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PAYMENT_TYPE_ID");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("SITE_ID");

                    b.Property<int>("TotalFlatInstallments")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_FLAT_INSTALLMENTS");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("ExpenseInstallmentId");

                    b.HasIndex("FlatId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SiteId");

                    b.ToTable("FLAT_EXPENSE_INSTALLMENTS");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.FlatPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("APARTMENT_ID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int?>("ExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("EXPENSE_ID");

                    b.Property<int>("FeePlanId")
                        .HasColumnType("int")
                        .HasColumnName("FEE_PLAN_ID");

                    b.Property<int>("FeeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FEE_TYPE_ID");

                    b.Property<int>("FlatId")
                        .HasColumnType("int")
                        .HasColumnName("FLAT_ID");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<int>("MonthId")
                        .HasColumnType("int")
                        .HasColumnName("MONTH_ID");

                    b.Property<bool>("Paid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("PAID");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("PAID_AT");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PAYMENT_AMOUNT");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PAYMENT_TYPE_ID");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("SITE_ID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YEAR_ID");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("FeePlanId");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("FlatId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MonthId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SiteId");

                    b.HasIndex("YearId");

                    b.ToTable("FLAT_PAYMENTS");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentMonth", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("PAYMENT_MONTHS");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("PAYMENT_TYPES");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentYear", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("PAYMENT_YEARS");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("City")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("CITY");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("COUNTRY");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<string>("District")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DISTRICT");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("EMAIL");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME");

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PHONE");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("POSTAL_CODE");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("SITES");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.SiteManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("CONTACT_ID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("END_DATE");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("SITE_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("START_DATE");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("SiteId");

                    b.ToTable("SITE_MANAGERS");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.UserSiteAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessType")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ACCESS_TYPE");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOnUtc");

                    b.Property<int?>("FlatId")
                        .HasColumnType("int")
                        .HasColumnName("FLAT_ID");

                    b.Property<int?>("GrantedBy")
                        .HasColumnType("int")
                        .HasColumnName("GRANTED_BY");

                    b.Property<DateTime>("GrantedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("GRANTED_DATE")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("SITE_ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("FlatId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("SiteId");

                    b.ToTable("USER_SITE_ACCESSES");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Apartment", b =>
                {
                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Site", "Site")
                        .WithMany("Apartments")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.ApartmentFeePlan", b =>
                {
                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Apartment", "Apartment")
                        .WithMany("ApartmentFeePlans")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentMonth", "Month")
                        .WithMany("ApartmentFeePlans")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Site", "Site")
                        .WithMany("ApartmentFeePlans")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentYear", "Year")
                        .WithMany("ApartmentFeePlans")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Month");

                    b.Navigation("Site");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.CommonExpense", b =>
                {
                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Apartment", "Apartment")
                        .WithMany("CommonExpenses")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.ExpenseType", "ExpenseType")
                        .WithMany("CommonExpenses")
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentMonth", "Month")
                        .WithMany("CommonExpenses")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentType", "PaymentType")
                        .WithMany("CommonExpenses")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Site", "Site")
                        .WithMany("CommonExpenses")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentYear", "Year")
                        .WithMany("CommonExpenses")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("ExpenseType");

                    b.Navigation("Month");

                    b.Navigation("PaymentType");

                    b.Navigation("Site");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.ExpenseInstallment", b =>
                {
                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Apartment", "Apartment")
                        .WithMany("ExpenseInstallments")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.CommonExpense", "Expense")
                        .WithMany("ExpenseInstallments")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentType", "PaymentType")
                        .WithMany("ExpenseInstallments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Site", "Site")
                        .WithMany("ExpenseInstallments")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Expense");

                    b.Navigation("PaymentType");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Flat", b =>
                {
                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Apartment", "Apartment")
                        .WithMany("Flats")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Site", "Site")
                        .WithMany("Flats")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.FlatContact", b =>
                {
                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Contact", "Contact")
                        .WithMany("FlatContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Flat", "Flat")
                        .WithMany("FlatContacts")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Flat");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.FlatExpenseInstallment", b =>
                {
                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Apartment", "Apartment")
                        .WithMany("FlatExpenseInstallments")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.CommonExpense", "Expense")
                        .WithMany("FlatExpenseInstallments")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.ExpenseInstallment", "ExpenseInstallment")
                        .WithMany("FlatExpenseInstallments")
                        .HasForeignKey("ExpenseInstallmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Flat", "Flat")
                        .WithMany("FlatExpenseInstallments")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentType", "PaymentType")
                        .WithMany("FlatExpenseInstallments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Site", "Site")
                        .WithMany("FlatExpenseInstallments")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Expense");

                    b.Navigation("ExpenseInstallment");

                    b.Navigation("Flat");

                    b.Navigation("PaymentType");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.FlatPayment", b =>
                {
                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Apartment", "Apartment")
                        .WithMany("FlatPayments")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.CommonExpense", "Expense")
                        .WithMany("FlatPayments")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.ApartmentFeePlan", "FeePlan")
                        .WithMany("FlatPayments")
                        .HasForeignKey("FeePlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.FeeType", "FeeType")
                        .WithMany("FlatPayments")
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Flat", "Flat")
                        .WithMany("FlatPayments")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentMonth", "Month")
                        .WithMany("FlatPayments")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentType", "PaymentType")
                        .WithMany("FlatPayments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Site", "Site")
                        .WithMany("FlatPayments")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentYear", "Year")
                        .WithMany("FlatPayments")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Expense");

                    b.Navigation("FeePlan");

                    b.Navigation("FeeType");

                    b.Navigation("Flat");

                    b.Navigation("Month");

                    b.Navigation("PaymentType");

                    b.Navigation("Site");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.SiteManager", b =>
                {
                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Contact", "Contact")
                        .WithMany("SiteManagers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Site", "Site")
                        .WithMany("SiteManagers")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.UserSiteAccess", b =>
                {
                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Flat", "Flat")
                        .WithMany("UserSiteAccesses")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Site", "Site")
                        .WithMany("UserSiteAccesses")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flat");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Apartment", b =>
                {
                    b.Navigation("ApartmentFeePlans");

                    b.Navigation("CommonExpenses");

                    b.Navigation("ExpenseInstallments");

                    b.Navigation("FlatExpenseInstallments");

                    b.Navigation("FlatPayments");

                    b.Navigation("Flats");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.ApartmentFeePlan", b =>
                {
                    b.Navigation("FlatPayments");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.CommonExpense", b =>
                {
                    b.Navigation("ExpenseInstallments");

                    b.Navigation("FlatExpenseInstallments");

                    b.Navigation("FlatPayments");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Contact", b =>
                {
                    b.Navigation("FlatContacts");

                    b.Navigation("SiteManagers");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.ExpenseInstallment", b =>
                {
                    b.Navigation("FlatExpenseInstallments");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.ExpenseType", b =>
                {
                    b.Navigation("CommonExpenses");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.FeeType", b =>
                {
                    b.Navigation("FlatPayments");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Flat", b =>
                {
                    b.Navigation("FlatContacts");

                    b.Navigation("FlatExpenseInstallments");

                    b.Navigation("FlatPayments");

                    b.Navigation("UserSiteAccesses");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentMonth", b =>
                {
                    b.Navigation("ApartmentFeePlans");

                    b.Navigation("CommonExpenses");

                    b.Navigation("FlatPayments");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentType", b =>
                {
                    b.Navigation("CommonExpenses");

                    b.Navigation("ExpenseInstallments");

                    b.Navigation("FlatExpenseInstallments");

                    b.Navigation("FlatPayments");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.PaymentYear", b =>
                {
                    b.Navigation("ApartmentFeePlans");

                    b.Navigation("CommonExpenses");

                    b.Navigation("FlatPayments");
                });

            modelBuilder.Entity("QuickCode.Demo.ApartmentManageModule.Domain.Entities.Site", b =>
                {
                    b.Navigation("ApartmentFeePlans");

                    b.Navigation("Apartments");

                    b.Navigation("CommonExpenses");

                    b.Navigation("ExpenseInstallments");

                    b.Navigation("FlatExpenseInstallments");

                    b.Navigation("FlatPayments");

                    b.Navigation("Flats");

                    b.Navigation("SiteManagers");

                    b.Navigation("UserSiteAccesses");
                });
#pragma warning restore 612, 618
        }
    }
}
