//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.PaymentType;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Application.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class PaymentTypeRepository : BaseRepository, IPaymentTypeRepository
    {
        public async Task<RepoResponse<List<GetActivePaymentTypesResponseDto>>> GetActivePaymentTypesAsync(bool paymentTypesIsActive)
        {
            return await ExecuteWithExceptionHandling("GetActivePaymentTypes", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentType.Query.GetActivePaymentTypes);
                var parameters = new
                {
                    PRM_PAYMENT_TYPES_IS_ACTIVE = paymentTypesIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetActivePaymentTypesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentType");
            });
        }

        public async Task<RepoResponse<List<GetFlatPaymentsForPaymentTypesResponseDto>>> GetFlatPaymentsForPaymentTypesAsync(int paymentTypesId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForPaymentTypes", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentType.Query.GetFlatPaymentsForPaymentTypes);
                var parameters = new
                {
                    PRM_PAYMENT_TYPES_ID = paymentTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatPaymentsForPaymentTypesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentType");
            });
        }

        public async Task<RepoResponse<GetFlatPaymentsForPaymentTypesResponseDto>> GetFlatPaymentsForPaymentTypesDetailsAsync(int paymentTypesId, int flatPaymentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForPaymentTypesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentType.Query.GetFlatPaymentsForPaymentTypesDetails);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_ID = flatPaymentsId,
                    PRM_PAYMENT_TYPES_ID = paymentTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatPaymentsForPaymentTypesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in PaymentType");
            });
        }

        public async Task<RepoResponse<List<GetCommonExpensesForPaymentTypesResponseDto>>> GetCommonExpensesForPaymentTypesAsync(int paymentTypesId)
        {
            return await ExecuteWithExceptionHandling("GetCommonExpensesForPaymentTypes", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentType.Query.GetCommonExpensesForPaymentTypes);
                var parameters = new
                {
                    PRM_PAYMENT_TYPES_ID = paymentTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetCommonExpensesForPaymentTypesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentType");
            });
        }

        public async Task<RepoResponse<GetCommonExpensesForPaymentTypesResponseDto>> GetCommonExpensesForPaymentTypesDetailsAsync(int paymentTypesId, int commonExpensesId)
        {
            return await ExecuteWithExceptionHandling("GetCommonExpensesForPaymentTypesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentType.Query.GetCommonExpensesForPaymentTypesDetails);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_ID = commonExpensesId,
                    PRM_PAYMENT_TYPES_ID = paymentTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetCommonExpensesForPaymentTypesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in PaymentType");
            });
        }

        public async Task<RepoResponse<List<GetExpenseInstallmentsForPaymentTypesResponseDto>>> GetExpenseInstallmentsForPaymentTypesAsync(int paymentTypesId)
        {
            return await ExecuteWithExceptionHandling("GetExpenseInstallmentsForPaymentTypes", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentType.Query.GetExpenseInstallmentsForPaymentTypes);
                var parameters = new
                {
                    PRM_PAYMENT_TYPES_ID = paymentTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetExpenseInstallmentsForPaymentTypesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentType");
            });
        }

        public async Task<RepoResponse<GetExpenseInstallmentsForPaymentTypesResponseDto>> GetExpenseInstallmentsForPaymentTypesDetailsAsync(int paymentTypesId, int expenseInstallmentsId)
        {
            return await ExecuteWithExceptionHandling("GetExpenseInstallmentsForPaymentTypesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentType.Query.GetExpenseInstallmentsForPaymentTypesDetails);
                var parameters = new
                {
                    PRM_EXPENSE_INSTALLMENTS_ID = expenseInstallmentsId,
                    PRM_PAYMENT_TYPES_ID = paymentTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetExpenseInstallmentsForPaymentTypesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in PaymentType");
            });
        }

        public async Task<RepoResponse<List<GetFlatExpenseInstallmentsForPaymentTypesResponseDto>>> GetFlatExpenseInstallmentsForPaymentTypesAsync(int paymentTypesId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForPaymentTypes", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentType.Query.GetFlatExpenseInstallmentsForPaymentTypes);
                var parameters = new
                {
                    PRM_PAYMENT_TYPES_ID = paymentTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatExpenseInstallmentsForPaymentTypesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentType");
            });
        }

        public async Task<RepoResponse<GetFlatExpenseInstallmentsForPaymentTypesResponseDto>> GetFlatExpenseInstallmentsForPaymentTypesDetailsAsync(int paymentTypesId, int flatExpenseInstallmentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForPaymentTypesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentType.Query.GetFlatExpenseInstallmentsForPaymentTypesDetails);
                var parameters = new
                {
                    PRM_FLAT_EXPENSE_INSTALLMENTS_ID = flatExpenseInstallmentsId,
                    PRM_PAYMENT_TYPES_ID = paymentTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatExpenseInstallmentsForPaymentTypesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in PaymentType");
            });
        }
    }
}