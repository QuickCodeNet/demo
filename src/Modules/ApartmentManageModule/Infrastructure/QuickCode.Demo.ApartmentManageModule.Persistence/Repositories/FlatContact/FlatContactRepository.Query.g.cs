//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.FlatContact;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Application.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class FlatContactRepository : BaseRepository, IFlatContactRepository
    {
        public async Task<RepoResponse<List<GetFlatOwnersResponseDto>>> GetFlatOwnersAsync(int flatContactsFlatId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetFlatOwners", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatContact.Query.GetFlatOwners);
                var parameters = new
                {
                    PRM_FLAT_CONTACTS_FLAT_ID = flatContactsFlatId,
                    PRM_FLAT_CONTACTS_RELATIONSHIP_TYPE = flatContactsRelationshipType,
                    PRM_FLAT_CONTACTS_IS_ACTIVE = flatContactsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatOwnersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatContact");
            });
        }

        public async Task<RepoResponse<List<GetFlatTenantsResponseDto>>> GetFlatTenantsAsync(int flatContactsFlatId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetFlatTenants", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatContact.Query.GetFlatTenants);
                var parameters = new
                {
                    PRM_FLAT_CONTACTS_FLAT_ID = flatContactsFlatId,
                    PRM_FLAT_CONTACTS_RELATIONSHIP_TYPE = flatContactsRelationshipType,
                    PRM_FLAT_CONTACTS_IS_ACTIVE = flatContactsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatTenantsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatContact");
            });
        }

        public async Task<RepoResponse<List<GetContactFlatsResponseDto>>> GetContactFlatsAsync(int flatContactsContactId, bool flatContactsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetContactFlats", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatContact.Query.GetContactFlats);
                var parameters = new
                {
                    PRM_FLAT_CONTACTS_CONTACT_ID = flatContactsContactId,
                    PRM_FLAT_CONTACTS_IS_ACTIVE = flatContactsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetContactFlatsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatContact");
            });
        }

        public async Task<RepoResponse<List<GetContactOwnedFlatsResponseDto>>> GetContactOwnedFlatsAsync(int flatContactsContactId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetContactOwnedFlats", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatContact.Query.GetContactOwnedFlats);
                var parameters = new
                {
                    PRM_FLAT_CONTACTS_CONTACT_ID = flatContactsContactId,
                    PRM_FLAT_CONTACTS_RELATIONSHIP_TYPE = flatContactsRelationshipType,
                    PRM_FLAT_CONTACTS_IS_ACTIVE = flatContactsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetContactOwnedFlatsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatContact");
            });
        }

        public async Task<RepoResponse<List<GetContactRentedFlatsResponseDto>>> GetContactRentedFlatsAsync(int flatContactsContactId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetContactRentedFlats", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatContact.Query.GetContactRentedFlats);
                var parameters = new
                {
                    PRM_FLAT_CONTACTS_CONTACT_ID = flatContactsContactId,
                    PRM_FLAT_CONTACTS_RELATIONSHIP_TYPE = flatContactsRelationshipType,
                    PRM_FLAT_CONTACTS_IS_ACTIVE = flatContactsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetContactRentedFlatsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatContact");
            });
        }

        public async Task<RepoResponse<bool>> CheckFlatHasOwnerAsync(int flatContactsFlatId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive)
        {
            return await ExecuteWithExceptionHandling("CheckFlatHasOwner", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatContact.Query.CheckFlatHasOwner);
                var parameters = new
                {
                    PRM_FLAT_CONTACTS_FLAT_ID = flatContactsFlatId,
                    PRM_FLAT_CONTACTS_RELATIONSHIP_TYPE = flatContactsRelationshipType,
                    PRM_FLAT_CONTACTS_IS_ACTIVE = flatContactsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var exists = await connection.ExecuteScalarAsync<bool>(sql, parameters);
                return BuildBoolResponse(exists, $"Not found in FlatContact");
            });
        }

        public async Task<RepoResponse<bool>> CheckFlatHasTenantAsync(int flatContactsFlatId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive)
        {
            return await ExecuteWithExceptionHandling("CheckFlatHasTenant", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatContact.Query.CheckFlatHasTenant);
                var parameters = new
                {
                    PRM_FLAT_CONTACTS_FLAT_ID = flatContactsFlatId,
                    PRM_FLAT_CONTACTS_RELATIONSHIP_TYPE = flatContactsRelationshipType,
                    PRM_FLAT_CONTACTS_IS_ACTIVE = flatContactsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var exists = await connection.ExecuteScalarAsync<bool>(sql, parameters);
                return BuildBoolResponse(exists, $"Not found in FlatContact");
            });
        }

        public async Task<RepoResponse<long>> GetFlatContactsCountAsync(int flatContactsFlatId, bool flatContactsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetFlatContactsCount", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatContact.Query.GetFlatContactsCount);
                var parameters = new
                {
                    PRM_FLAT_CONTACTS_FLAT_ID = flatContactsFlatId,
                    PRM_FLAT_CONTACTS_IS_ACTIVE = flatContactsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var result = await connection.ExecuteScalarAsync<long>(sql, parameters);
                return new RepoResponse<long>(result, "Success");
            });
        }
    }
}