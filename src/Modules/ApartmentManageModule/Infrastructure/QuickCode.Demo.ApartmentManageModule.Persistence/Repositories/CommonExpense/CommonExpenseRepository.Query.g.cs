//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.CommonExpense;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Application.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class CommonExpenseRepository : BaseRepository, ICommonExpenseRepository
    {
        public async Task<RepoResponse<List<GetExpensesByApartmentMonthResponseDto>>> GetExpensesByApartmentMonthAsync(int commonExpensesSiteId, int commonExpensesApartmentId, int commonExpensesYearId, int commonExpensesMonthId)
        {
            return await ExecuteWithExceptionHandling("GetExpensesByApartmentMonth", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetExpensesByApartmentMonth);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_SITE_ID = commonExpensesSiteId,
                    PRM_COMMON_EXPENSES_APARTMENT_ID = commonExpensesApartmentId,
                    PRM_COMMON_EXPENSES_YEAR_ID = commonExpensesYearId,
                    PRM_COMMON_EXPENSES_MONTH_ID = commonExpensesMonthId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetExpensesByApartmentMonthResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in CommonExpense");
            });
        }

        public async Task<RepoResponse<List<GetExpensesBySiteResponseDto>>> GetExpensesBySiteAsync(int commonExpensesSiteId)
        {
            return await ExecuteWithExceptionHandling("GetExpensesBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetExpensesBySite);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_SITE_ID = commonExpensesSiteId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetExpensesBySiteResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in CommonExpense");
            });
        }

        public async Task<RepoResponse<List<GetExpensesSummaryByYearResponseDto>>> GetExpensesSummaryByYearAsync(int commonExpensesSiteId, int commonExpensesApartmentId, int commonExpensesYearId)
        {
            return await ExecuteWithExceptionHandling("GetExpensesSummaryByYear", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetExpensesSummaryByYear);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_SITE_ID = commonExpensesSiteId,
                    PRM_COMMON_EXPENSES_APARTMENT_ID = commonExpensesApartmentId,
                    PRM_COMMON_EXPENSES_YEAR_ID = commonExpensesYearId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetExpensesSummaryByYearResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in CommonExpense");
            });
        }

        public async Task<RepoResponse<List<GetExpensesByTypeResponseDto>>> GetExpensesByTypeAsync(int commonExpensesSiteId, int commonExpensesApartmentId, int commonExpensesExpenseTypeId, int commonExpensesYearId, int commonExpensesMonthId)
        {
            return await ExecuteWithExceptionHandling("GetExpensesByType", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetExpensesByType);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_SITE_ID = commonExpensesSiteId,
                    PRM_COMMON_EXPENSES_APARTMENT_ID = commonExpensesApartmentId,
                    PRM_COMMON_EXPENSES_EXPENSE_TYPE_ID = commonExpensesExpenseTypeId,
                    PRM_COMMON_EXPENSES_YEAR_ID = commonExpensesYearId,
                    PRM_COMMON_EXPENSES_MONTH_ID = commonExpensesMonthId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetExpensesByTypeResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in CommonExpense");
            });
        }

        public async Task<RepoResponse<List<GetUnpaidExpensesByApartmentResponseDto>>> GetUnpaidExpensesByApartmentAsync(int commonExpensesApartmentId, bool commonExpensesPaid)
        {
            return await ExecuteWithExceptionHandling("GetUnpaidExpensesByApartment", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetUnpaidExpensesByApartment);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_APARTMENT_ID = commonExpensesApartmentId,
                    PRM_COMMON_EXPENSES_PAID = commonExpensesPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetUnpaidExpensesByApartmentResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in CommonExpense");
            });
        }

        public async Task<RepoResponse<long>> GetExpensesCountByApartmentAsync(int commonExpensesApartmentId)
        {
            return await ExecuteWithExceptionHandling("GetExpensesCountByApartment", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetExpensesCountByApartment);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_APARTMENT_ID = commonExpensesApartmentId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var result = await connection.ExecuteScalarAsync<long>(sql, parameters);
                return new RepoResponse<long>(result, "Success");
            });
        }

        public async Task<RepoResponse<GetTotalExpenseAmountByApartmentResponseDto>> GetTotalExpenseAmountByApartmentAsync(int commonExpensesApartmentId)
        {
            return await ExecuteWithExceptionHandling("GetTotalExpenseAmountByApartment", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetTotalExpenseAmountByApartment);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_APARTMENT_ID = commonExpensesApartmentId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetTotalExpenseAmountByApartmentResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in CommonExpense");
            });
        }

        public async Task<RepoResponse<List<GetFlatPaymentsForCommonExpensesResponseDto>>> GetFlatPaymentsForCommonExpensesAsync(int commonExpensesId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForCommonExpenses", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetFlatPaymentsForCommonExpenses);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_ID = commonExpensesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatPaymentsForCommonExpensesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in CommonExpense");
            });
        }

        public async Task<RepoResponse<GetFlatPaymentsForCommonExpensesResponseDto>> GetFlatPaymentsForCommonExpensesDetailsAsync(int commonExpensesId, int flatPaymentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForCommonExpensesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetFlatPaymentsForCommonExpensesDetails);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_ID = flatPaymentsId,
                    PRM_COMMON_EXPENSES_ID = commonExpensesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatPaymentsForCommonExpensesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in CommonExpense");
            });
        }

        public async Task<RepoResponse<List<GetExpenseInstallmentsForCommonExpensesResponseDto>>> GetExpenseInstallmentsForCommonExpensesAsync(int commonExpensesId)
        {
            return await ExecuteWithExceptionHandling("GetExpenseInstallmentsForCommonExpenses", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetExpenseInstallmentsForCommonExpenses);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_ID = commonExpensesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetExpenseInstallmentsForCommonExpensesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in CommonExpense");
            });
        }

        public async Task<RepoResponse<GetExpenseInstallmentsForCommonExpensesResponseDto>> GetExpenseInstallmentsForCommonExpensesDetailsAsync(int commonExpensesId, int expenseInstallmentsId)
        {
            return await ExecuteWithExceptionHandling("GetExpenseInstallmentsForCommonExpensesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetExpenseInstallmentsForCommonExpensesDetails);
                var parameters = new
                {
                    PRM_EXPENSE_INSTALLMENTS_ID = expenseInstallmentsId,
                    PRM_COMMON_EXPENSES_ID = commonExpensesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetExpenseInstallmentsForCommonExpensesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in CommonExpense");
            });
        }

        public async Task<RepoResponse<List<GetFlatExpenseInstallmentsForCommonExpensesResponseDto>>> GetFlatExpenseInstallmentsForCommonExpensesAsync(int commonExpensesId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForCommonExpenses", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetFlatExpenseInstallmentsForCommonExpenses);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_ID = commonExpensesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatExpenseInstallmentsForCommonExpensesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in CommonExpense");
            });
        }

        public async Task<RepoResponse<GetFlatExpenseInstallmentsForCommonExpensesResponseDto>> GetFlatExpenseInstallmentsForCommonExpensesDetailsAsync(int commonExpensesId, int flatExpenseInstallmentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForCommonExpensesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CommonExpense.Query.GetFlatExpenseInstallmentsForCommonExpensesDetails);
                var parameters = new
                {
                    PRM_FLAT_EXPENSE_INSTALLMENTS_ID = flatExpenseInstallmentsId,
                    PRM_COMMON_EXPENSES_ID = commonExpensesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatExpenseInstallmentsForCommonExpensesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in CommonExpense");
            });
        }
    }
}