//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.FlatPayment;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Application.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class FlatPaymentRepository : BaseRepository, IFlatPaymentRepository
    {
        public async Task<RepoResponse<List<GetPaymentsByFlatYearMonthResponseDto>>> GetPaymentsByFlatYearMonthAsync(int flatPaymentsSiteId, int flatPaymentsFlatId, int flatPaymentsYearId, int flatPaymentsMonthId)
        {
            return await ExecuteWithExceptionHandling("GetPaymentsByFlatYearMonth", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatPayment.Query.GetPaymentsByFlatYearMonth);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_SITE_ID = flatPaymentsSiteId,
                    PRM_FLAT_PAYMENTS_FLAT_ID = flatPaymentsFlatId,
                    PRM_FLAT_PAYMENTS_YEAR_ID = flatPaymentsYearId,
                    PRM_FLAT_PAYMENTS_MONTH_ID = flatPaymentsMonthId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetPaymentsByFlatYearMonthResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatPayment");
            });
        }

        public async Task<RepoResponse<List<GetUnpaidPaymentsByFlatResponseDto>>> GetUnpaidPaymentsByFlatAsync(int flatPaymentsSiteId, int flatPaymentsFlatId, bool flatPaymentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetUnpaidPaymentsByFlat", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatPayment.Query.GetUnpaidPaymentsByFlat);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_SITE_ID = flatPaymentsSiteId,
                    PRM_FLAT_PAYMENTS_FLAT_ID = flatPaymentsFlatId,
                    PRM_FLAT_PAYMENTS_PAID = flatPaymentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetUnpaidPaymentsByFlatResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatPayment");
            });
        }

        public async Task<RepoResponse<List<GetUnpaidPaymentsBySiteResponseDto>>> GetUnpaidPaymentsBySiteAsync(int flatPaymentsSiteId, bool flatPaymentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetUnpaidPaymentsBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatPayment.Query.GetUnpaidPaymentsBySite);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_SITE_ID = flatPaymentsSiteId,
                    PRM_FLAT_PAYMENTS_PAID = flatPaymentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetUnpaidPaymentsBySiteResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatPayment");
            });
        }

        public async Task<RepoResponse<List<GetTotalCashInSafeResponseDto>>> GetTotalCashInSafeAsync(int flatPaymentsSiteId, bool flatPaymentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetTotalCashInSafe", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatPayment.Query.GetTotalCashInSafe);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_SITE_ID = flatPaymentsSiteId,
                    PRM_FLAT_PAYMENTS_PAID = flatPaymentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetTotalCashInSafeResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatPayment");
            });
        }

        public async Task<RepoResponse<List<GetPendingPaymentsByFlatYearMonthResponseDto>>> GetPendingPaymentsByFlatYearMonthAsync(int flatPaymentsSiteId, bool flatPaymentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetPendingPaymentsByFlatYearMonth", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatPayment.Query.GetPendingPaymentsByFlatYearMonth);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_SITE_ID = flatPaymentsSiteId,
                    PRM_FLAT_PAYMENTS_PAID = flatPaymentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetPendingPaymentsByFlatYearMonthResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatPayment");
            });
        }

        public async Task<RepoResponse<List<GetFlatPaymentsByMonthResponseDto>>> GetFlatPaymentsByMonthAsync(int flatPaymentsFlatId, int flatPaymentsYearId, int flatPaymentsMonthId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsByMonth", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatPayment.Query.GetFlatPaymentsByMonth);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_FLAT_ID = flatPaymentsFlatId,
                    PRM_FLAT_PAYMENTS_YEAR_ID = flatPaymentsYearId,
                    PRM_FLAT_PAYMENTS_MONTH_ID = flatPaymentsMonthId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatPaymentsByMonthResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatPayment");
            });
        }

        public async Task<RepoResponse<long>> GetPaymentsCountByFlatAsync(int flatPaymentsFlatId)
        {
            return await ExecuteWithExceptionHandling("GetPaymentsCountByFlat", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatPayment.Query.GetPaymentsCountByFlat);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_FLAT_ID = flatPaymentsFlatId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var result = await connection.ExecuteScalarAsync<long>(sql, parameters);
                return new RepoResponse<long>(result, "Success");
            });
        }

        public async Task<RepoResponse<GetTotalPaidAmountByFlatResponseDto>> GetTotalPaidAmountByFlatAsync(int flatPaymentsFlatId, bool flatPaymentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetTotalPaidAmountByFlat", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatPayment.Query.GetTotalPaidAmountByFlat);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_FLAT_ID = flatPaymentsFlatId,
                    PRM_FLAT_PAYMENTS_PAID = flatPaymentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetTotalPaidAmountByFlatResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in FlatPayment");
            });
        }

        public async Task<RepoResponse<long>> GetUnpaidPaymentsCountBySiteAsync(int flatPaymentsSiteId, bool flatPaymentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetUnpaidPaymentsCountBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatPayment.Query.GetUnpaidPaymentsCountBySite);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_SITE_ID = flatPaymentsSiteId,
                    PRM_FLAT_PAYMENTS_PAID = flatPaymentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var result = await connection.ExecuteScalarAsync<long>(sql, parameters);
                return new RepoResponse<long>(result, "Success");
            });
        }
    }
}