//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.Apartment;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Application.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class ApartmentRepository : BaseRepository, IApartmentRepository
    {
        public async Task<RepoResponse<List<GetApartmentsBySiteResponseDto>>> GetApartmentsBySiteAsync(int apartmentsSiteId, bool apartmentsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetApartmentsBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetApartmentsBySite);
                var parameters = new
                {
                    PRM_APARTMENTS_SITE_ID = apartmentsSiteId,
                    PRM_APARTMENTS_IS_ACTIVE = apartmentsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetApartmentsBySiteResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<List<GetActiveApartmentsResponseDto>>> GetActiveApartmentsAsync(bool apartmentsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetActiveApartments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetActiveApartments);
                var parameters = new
                {
                    PRM_APARTMENTS_IS_ACTIVE = apartmentsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetActiveApartmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<List<GetFlatsForApartmentsResponseDto>>> GetFlatsForApartmentsAsync(int apartmentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatsForApartments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetFlatsForApartments);
                var parameters = new
                {
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatsForApartmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<GetFlatsForApartmentsResponseDto>> GetFlatsForApartmentsDetailsAsync(int apartmentsId, int flatsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatsForApartmentsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetFlatsForApartmentsDetails);
                var parameters = new
                {
                    PRM_FLATS_ID = flatsId,
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatsForApartmentsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<List<GetFlatPaymentsForApartmentsResponseDto>>> GetFlatPaymentsForApartmentsAsync(int apartmentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForApartments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetFlatPaymentsForApartments);
                var parameters = new
                {
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatPaymentsForApartmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<GetFlatPaymentsForApartmentsResponseDto>> GetFlatPaymentsForApartmentsDetailsAsync(int apartmentsId, int flatPaymentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForApartmentsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetFlatPaymentsForApartmentsDetails);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_ID = flatPaymentsId,
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatPaymentsForApartmentsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<List<GetCommonExpensesForApartmentsResponseDto>>> GetCommonExpensesForApartmentsAsync(int apartmentsId)
        {
            return await ExecuteWithExceptionHandling("GetCommonExpensesForApartments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetCommonExpensesForApartments);
                var parameters = new
                {
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetCommonExpensesForApartmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<GetCommonExpensesForApartmentsResponseDto>> GetCommonExpensesForApartmentsDetailsAsync(int apartmentsId, int commonExpensesId)
        {
            return await ExecuteWithExceptionHandling("GetCommonExpensesForApartmentsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetCommonExpensesForApartmentsDetails);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_ID = commonExpensesId,
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetCommonExpensesForApartmentsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<List<GetApartmentFeePlansForApartmentsResponseDto>>> GetApartmentFeePlansForApartmentsAsync(int apartmentsId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentFeePlansForApartments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetApartmentFeePlansForApartments);
                var parameters = new
                {
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetApartmentFeePlansForApartmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<GetApartmentFeePlansForApartmentsResponseDto>> GetApartmentFeePlansForApartmentsDetailsAsync(int apartmentsId, int apartmentFeePlansId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentFeePlansForApartmentsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetApartmentFeePlansForApartmentsDetails);
                var parameters = new
                {
                    PRM_APARTMENT_FEE_PLANS_ID = apartmentFeePlansId,
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetApartmentFeePlansForApartmentsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<List<GetExpenseInstallmentsForApartmentsResponseDto>>> GetExpenseInstallmentsForApartmentsAsync(int apartmentsId)
        {
            return await ExecuteWithExceptionHandling("GetExpenseInstallmentsForApartments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetExpenseInstallmentsForApartments);
                var parameters = new
                {
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetExpenseInstallmentsForApartmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<GetExpenseInstallmentsForApartmentsResponseDto>> GetExpenseInstallmentsForApartmentsDetailsAsync(int apartmentsId, int expenseInstallmentsId)
        {
            return await ExecuteWithExceptionHandling("GetExpenseInstallmentsForApartmentsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetExpenseInstallmentsForApartmentsDetails);
                var parameters = new
                {
                    PRM_EXPENSE_INSTALLMENTS_ID = expenseInstallmentsId,
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetExpenseInstallmentsForApartmentsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<List<GetFlatExpenseInstallmentsForApartmentsResponseDto>>> GetFlatExpenseInstallmentsForApartmentsAsync(int apartmentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForApartments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetFlatExpenseInstallmentsForApartments);
                var parameters = new
                {
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatExpenseInstallmentsForApartmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Apartment");
            });
        }

        public async Task<RepoResponse<GetFlatExpenseInstallmentsForApartmentsResponseDto>> GetFlatExpenseInstallmentsForApartmentsDetailsAsync(int apartmentsId, int flatExpenseInstallmentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForApartmentsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Apartment.Query.GetFlatExpenseInstallmentsForApartmentsDetails);
                var parameters = new
                {
                    PRM_FLAT_EXPENSE_INSTALLMENTS_ID = flatExpenseInstallmentsId,
                    PRM_APARTMENTS_ID = apartmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatExpenseInstallmentsForApartmentsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Apartment");
            });
        }
    }
}