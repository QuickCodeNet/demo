//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.UserSiteAccess;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Application.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class UserSiteAccessRepository : BaseRepository, IUserSiteAccessRepository
    {
        public async Task<RepoResponse<List<GetUserSitesResponseDto>>> GetUserSitesAsync(int userSiteAccessesUserId, bool userSiteAccessesIsActive)
        {
            return await ExecuteWithExceptionHandling("GetUserSites", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.UserSiteAccess.Query.GetUserSites);
                var parameters = new
                {
                    PRM_USER_SITE_ACCESSES_USER_ID = userSiteAccessesUserId,
                    PRM_USER_SITE_ACCESSES_IS_ACTIVE = userSiteAccessesIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetUserSitesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in UserSiteAccess");
            });
        }

        public async Task<RepoResponse<List<GetSiteUsersResponseDto>>> GetSiteUsersAsync(int userSiteAccessesSiteId, bool userSiteAccessesIsActive)
        {
            return await ExecuteWithExceptionHandling("GetSiteUsers", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.UserSiteAccess.Query.GetSiteUsers);
                var parameters = new
                {
                    PRM_USER_SITE_ACCESSES_SITE_ID = userSiteAccessesSiteId,
                    PRM_USER_SITE_ACCESSES_IS_ACTIVE = userSiteAccessesIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetSiteUsersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in UserSiteAccess");
            });
        }

        public async Task<RepoResponse<List<GetUserFlatsResponseDto>>> GetUserFlatsAsync(int userSiteAccessesUserId, bool userSiteAccessesIsActive)
        {
            return await ExecuteWithExceptionHandling("GetUserFlats", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.UserSiteAccess.Query.GetUserFlats);
                var parameters = new
                {
                    PRM_USER_SITE_ACCESSES_USER_ID = userSiteAccessesUserId,
                    PRM_USER_SITE_ACCESSES_IS_ACTIVE = userSiteAccessesIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetUserFlatsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in UserSiteAccess");
            });
        }
    }
}