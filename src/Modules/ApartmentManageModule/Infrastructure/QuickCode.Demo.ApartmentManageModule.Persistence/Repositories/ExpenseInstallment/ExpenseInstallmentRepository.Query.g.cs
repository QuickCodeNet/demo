//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.ExpenseInstallment;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Persistence.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class ExpenseInstallmentRepository : BaseRepository, IExpenseInstallmentRepository
    {
        public async Task<RepoResponse<List<GetExpenseInstallmentsResponseDto>>> GetExpenseInstallmentsAsync(int expenseInstallmentsExpenseId)
        {
            return await ExecuteWithExceptionHandling("GetExpenseInstallments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ExpenseInstallment.Query.GetExpenseInstallments);
                var parameters = new
                {
                    PRM_EXPENSE_INSTALLMENTS_EXPENSE_ID = expenseInstallmentsExpenseId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetExpenseInstallmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in ExpenseInstallment");
            });
        }

        public async Task<RepoResponse<List<GetUnpaidInstallmentsResponseDto>>> GetUnpaidInstallmentsAsync(int expenseInstallmentsExpenseId, bool expenseInstallmentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetUnpaidInstallments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ExpenseInstallment.Query.GetUnpaidInstallments);
                var parameters = new
                {
                    PRM_EXPENSE_INSTALLMENTS_EXPENSE_ID = expenseInstallmentsExpenseId,
                    PRM_EXPENSE_INSTALLMENTS_PAID = expenseInstallmentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetUnpaidInstallmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in ExpenseInstallment");
            });
        }

        public async Task<RepoResponse<List<GetOverdueInstallmentsResponseDto>>> GetOverdueInstallmentsAsync(bool expenseInstallmentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetOverdueInstallments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ExpenseInstallment.Query.GetOverdueInstallments);
                var parameters = new
                {
                    PRM_EXPENSE_INSTALLMENTS_PAID = expenseInstallmentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetOverdueInstallmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in ExpenseInstallment");
            });
        }

        public async Task<RepoResponse<List<GetApartmentInstallmentsResponseDto>>> GetApartmentInstallmentsAsync(int expenseInstallmentsSiteId, int expenseInstallmentsApartmentId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentInstallments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ExpenseInstallment.Query.GetApartmentInstallments);
                var parameters = new
                {
                    PRM_EXPENSE_INSTALLMENTS_SITE_ID = expenseInstallmentsSiteId,
                    PRM_EXPENSE_INSTALLMENTS_APARTMENT_ID = expenseInstallmentsApartmentId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetApartmentInstallmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in ExpenseInstallment");
            });
        }

        public async Task<RepoResponse<List<GetSiteInstallmentsResponseDto>>> GetSiteInstallmentsAsync(int expenseInstallmentsSiteId)
        {
            return await ExecuteWithExceptionHandling("GetSiteInstallments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ExpenseInstallment.Query.GetSiteInstallments);
                var parameters = new
                {
                    PRM_EXPENSE_INSTALLMENTS_SITE_ID = expenseInstallmentsSiteId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetSiteInstallmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in ExpenseInstallment");
            });
        }

        public async Task<RepoResponse<List<GetFlatExpenseInstallmentsForExpenseInstallmentsResponseDto>>> GetFlatExpenseInstallmentsForExpenseInstallmentsAsync(int expenseInstallmentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForExpenseInstallments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ExpenseInstallment.Query.GetFlatExpenseInstallmentsForExpenseInstallments);
                var parameters = new
                {
                    PRM_EXPENSE_INSTALLMENTS_ID = expenseInstallmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatExpenseInstallmentsForExpenseInstallmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in ExpenseInstallment");
            });
        }

        public async Task<RepoResponse<GetFlatExpenseInstallmentsForExpenseInstallmentsResponseDto>> GetFlatExpenseInstallmentsForExpenseInstallmentsDetailsAsync(int expenseInstallmentsId, int flatExpenseInstallmentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForExpenseInstallmentsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ExpenseInstallment.Query.GetFlatExpenseInstallmentsForExpenseInstallmentsDetails);
                var parameters = new
                {
                    PRM_FLAT_EXPENSE_INSTALLMENTS_ID = flatExpenseInstallmentsId,
                    PRM_EXPENSE_INSTALLMENTS_ID = expenseInstallmentsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatExpenseInstallmentsForExpenseInstallmentsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in ExpenseInstallment");
            });
        }
    }
}