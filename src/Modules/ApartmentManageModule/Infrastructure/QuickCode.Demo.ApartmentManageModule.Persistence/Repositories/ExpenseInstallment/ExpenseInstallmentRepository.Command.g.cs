//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.ExpenseInstallment;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Persistence.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class ExpenseInstallmentRepository : BaseRepository, IExpenseInstallmentRepository
    {
        public async Task<RepoResponse<int>> MarkInstallmentAsPaidAsync(int expenseInstallmentsId, MarkInstallmentAsPaidRequestDto updateRequest)
        {
            return await ExecuteWithExceptionHandling("ExpenseInstallment", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ExpenseInstallment.Command.MarkInstallmentAsPaid);
                var parameters = new
                {
                    EXPENSE_INSTALLMENTS_PAYMENT_TYPE_ID = updateRequest.ExpenseInstallmentsPaymentTypeId,
                    PRM_EXPENSE_INSTALLMENTS_ID = expenseInstallmentsId
                };
                using var connection = await GetOpenConnectionAsync(_writeContext);
                var result = await connection.ExecuteAsync(sql, parameters);
                return new RepoResponse<int>(result, "Success");
            });
        }
    }
}