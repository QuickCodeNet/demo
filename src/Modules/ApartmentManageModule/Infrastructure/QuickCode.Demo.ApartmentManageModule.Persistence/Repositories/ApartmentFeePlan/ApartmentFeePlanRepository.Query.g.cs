//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.ApartmentFeePlan;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Application.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class ApartmentFeePlanRepository : BaseRepository, IApartmentFeePlanRepository
    {
        public async Task<RepoResponse<List<GetFeePlanByYearMonthResponseDto>>> GetFeePlanByYearMonthAsync(int apartmentFeePlansSiteId, int apartmentFeePlansApartmentId, int apartmentFeePlansYearId, int apartmentFeePlansMonthId, bool apartmentFeePlansIsActive)
        {
            return await ExecuteWithExceptionHandling("GetFeePlanByYearMonth", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ApartmentFeePlan.Query.GetFeePlanByYearMonth);
                var parameters = new
                {
                    PRM_APARTMENT_FEE_PLANS_SITE_ID = apartmentFeePlansSiteId,
                    PRM_APARTMENT_FEE_PLANS_APARTMENT_ID = apartmentFeePlansApartmentId,
                    PRM_APARTMENT_FEE_PLANS_YEAR_ID = apartmentFeePlansYearId,
                    PRM_APARTMENT_FEE_PLANS_MONTH_ID = apartmentFeePlansMonthId,
                    PRM_APARTMENT_FEE_PLANS_IS_ACTIVE = apartmentFeePlansIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFeePlanByYearMonthResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in ApartmentFeePlan");
            });
        }

        public async Task<RepoResponse<List<GetFeePlansBySiteResponseDto>>> GetFeePlansBySiteAsync(int apartmentFeePlansSiteId, bool apartmentFeePlansIsActive)
        {
            return await ExecuteWithExceptionHandling("GetFeePlansBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ApartmentFeePlan.Query.GetFeePlansBySite);
                var parameters = new
                {
                    PRM_APARTMENT_FEE_PLANS_SITE_ID = apartmentFeePlansSiteId,
                    PRM_APARTMENT_FEE_PLANS_IS_ACTIVE = apartmentFeePlansIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFeePlansBySiteResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in ApartmentFeePlan");
            });
        }

        public async Task<RepoResponse<List<GetFlatPaymentsForApartmentFeePlansResponseDto>>> GetFlatPaymentsForApartmentFeePlansAsync(int apartmentFeePlansId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForApartmentFeePlans", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ApartmentFeePlan.Query.GetFlatPaymentsForApartmentFeePlans);
                var parameters = new
                {
                    PRM_APARTMENT_FEE_PLANS_ID = apartmentFeePlansId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatPaymentsForApartmentFeePlansResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in ApartmentFeePlan");
            });
        }

        public async Task<RepoResponse<GetFlatPaymentsForApartmentFeePlansResponseDto>> GetFlatPaymentsForApartmentFeePlansDetailsAsync(int apartmentFeePlansId, int flatPaymentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForApartmentFeePlansDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.ApartmentFeePlan.Query.GetFlatPaymentsForApartmentFeePlansDetails);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_ID = flatPaymentsId,
                    PRM_APARTMENT_FEE_PLANS_ID = apartmentFeePlansId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatPaymentsForApartmentFeePlansResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in ApartmentFeePlan");
            });
        }
    }
}