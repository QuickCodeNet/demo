//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.Flat;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Persistence.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class FlatRepository : BaseRepository, IFlatRepository
    {
        public async Task<RepoResponse<List<GetFlatsByApartmentResponseDto>>> GetFlatsByApartmentAsync(int flatsApartmentId, bool flatsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetFlatsByApartment", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatsByApartment);
                var parameters = new
                {
                    PRM_FLATS_APARTMENT_ID = flatsApartmentId,
                    PRM_FLATS_IS_ACTIVE = flatsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatsByApartmentResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<List<GetFlatsBySiteResponseDto>>> GetFlatsBySiteAsync(int flatsSiteId, bool flatsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetFlatsBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatsBySite);
                var parameters = new
                {
                    PRM_FLATS_SITE_ID = flatsSiteId,
                    PRM_FLATS_IS_ACTIVE = flatsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatsBySiteResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<List<GetFlatsWithContactsResponseDto>>> GetFlatsWithContactsAsync(int flatsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatsWithContacts", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatsWithContacts);
                var parameters = new
                {
                    PRM_FLATS_ID = flatsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatsWithContactsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<List<GetVacantFlatsResponseDto>>> GetVacantFlatsAsync(bool flatsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetVacantFlats", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetVacantFlats);
                var parameters = new
                {
                    PRM_FLATS_IS_ACTIVE = flatsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetVacantFlatsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<List<GetRentedFlatsResponseDto>>> GetRentedFlatsAsync(bool flatsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetRentedFlats", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetRentedFlats);
                var parameters = new
                {
                    PRM_FLATS_IS_ACTIVE = flatsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetRentedFlatsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<GetFlatByNumberResponseDto>> GetFlatByNumberAsync(int flatsSiteId, string flatsFlatNumber)
        {
            return await ExecuteWithExceptionHandling("GetFlatByNumber", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatByNumber);
                var parameters = new
                {
                    PRM_FLATS_FLAT_NUMBER = flatsFlatNumber,
                    PRM_FLATS_SITE_ID = flatsSiteId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatByNumberResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<List<GetOwnedFlatsResponseDto>>> GetOwnedFlatsAsync(bool flatsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetOwnedFlats", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetOwnedFlats);
                var parameters = new
                {
                    PRM_FLATS_IS_ACTIVE = flatsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetOwnedFlatsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<long>> GetFlatsCountBySiteAsync(int flatsSiteId, bool flatsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetFlatsCountBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatsCountBySite);
                var parameters = new
                {
                    PRM_FLATS_SITE_ID = flatsSiteId,
                    PRM_FLATS_IS_ACTIVE = flatsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var result = await connection.ExecuteScalarAsync<long>(sql, parameters);
                return new RepoResponse<long>(result, "Success");
            });
        }

        public async Task<RepoResponse<long>> GetFlatsCountByApartmentAsync(int flatsApartmentId, bool flatsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetFlatsCountByApartment", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatsCountByApartment);
                var parameters = new
                {
                    PRM_FLATS_APARTMENT_ID = flatsApartmentId,
                    PRM_FLATS_IS_ACTIVE = flatsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var result = await connection.ExecuteScalarAsync<long>(sql, parameters);
                return new RepoResponse<long>(result, "Success");
            });
        }

        public async Task<RepoResponse<List<GetFlatContactsForFlatsResponseDto>>> GetFlatContactsForFlatsAsync(int flatsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatContactsForFlats", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatContactsForFlats);
                var parameters = new
                {
                    PRM_FLATS_ID = flatsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatContactsForFlatsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<GetFlatContactsForFlatsResponseDto>> GetFlatContactsForFlatsDetailsAsync(int flatsId, int flatContactsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatContactsForFlatsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatContactsForFlatsDetails);
                var parameters = new
                {
                    PRM_FLAT_CONTACTS_ID = flatContactsId,
                    PRM_FLATS_ID = flatsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatContactsForFlatsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<List<GetFlatPaymentsForFlatsResponseDto>>> GetFlatPaymentsForFlatsAsync(int flatsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForFlats", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatPaymentsForFlats);
                var parameters = new
                {
                    PRM_FLATS_ID = flatsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatPaymentsForFlatsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<GetFlatPaymentsForFlatsResponseDto>> GetFlatPaymentsForFlatsDetailsAsync(int flatsId, int flatPaymentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForFlatsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatPaymentsForFlatsDetails);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_ID = flatPaymentsId,
                    PRM_FLATS_ID = flatsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatPaymentsForFlatsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<List<GetFlatExpenseInstallmentsForFlatsResponseDto>>> GetFlatExpenseInstallmentsForFlatsAsync(int flatsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForFlats", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatExpenseInstallmentsForFlats);
                var parameters = new
                {
                    PRM_FLATS_ID = flatsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatExpenseInstallmentsForFlatsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<GetFlatExpenseInstallmentsForFlatsResponseDto>> GetFlatExpenseInstallmentsForFlatsDetailsAsync(int flatsId, int flatExpenseInstallmentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForFlatsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetFlatExpenseInstallmentsForFlatsDetails);
                var parameters = new
                {
                    PRM_FLAT_EXPENSE_INSTALLMENTS_ID = flatExpenseInstallmentsId,
                    PRM_FLATS_ID = flatsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatExpenseInstallmentsForFlatsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<List<GetUserSiteAccessesForFlatsResponseDto>>> GetUserSiteAccessesForFlatsAsync(int flatsId)
        {
            return await ExecuteWithExceptionHandling("GetUserSiteAccessesForFlats", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetUserSiteAccessesForFlats);
                var parameters = new
                {
                    PRM_FLATS_ID = flatsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetUserSiteAccessesForFlatsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Flat");
            });
        }

        public async Task<RepoResponse<GetUserSiteAccessesForFlatsResponseDto>> GetUserSiteAccessesForFlatsDetailsAsync(int flatsId, int userSiteAccessesId)
        {
            return await ExecuteWithExceptionHandling("GetUserSiteAccessesForFlatsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Flat.Query.GetUserSiteAccessesForFlatsDetails);
                var parameters = new
                {
                    PRM_USER_SITE_ACCESSES_ID = userSiteAccessesId,
                    PRM_FLATS_ID = flatsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetUserSiteAccessesForFlatsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Flat");
            });
        }
    }
}