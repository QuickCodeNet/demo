//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.Contact;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Application.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class ContactRepository : BaseRepository, IContactRepository
    {
        public async Task<RepoResponse<List<GetActiveContactsResponseDto>>> GetActiveContactsAsync(bool contactsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetActiveContacts", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.GetActiveContacts);
                var parameters = new
                {
                    PRM_CONTACTS_IS_ACTIVE = contactsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetActiveContactsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Contact");
            });
        }

        public async Task<RepoResponse<GetContactByIdResponseDto>> GetContactByIdAsync(int contactsId)
        {
            return await ExecuteWithExceptionHandling("GetContactById", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.GetContactById);
                var parameters = new
                {
                    PRM_CONTACTS_ID = contactsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetContactByIdResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Contact");
            });
        }

        public async Task<RepoResponse<GetContactByPhoneResponseDto>> GetContactByPhoneAsync(string contactsPhone)
        {
            return await ExecuteWithExceptionHandling("GetContactByPhone", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.GetContactByPhone);
                var parameters = new
                {
                    PRM_CONTACTS_PHONE = contactsPhone
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetContactByPhoneResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Contact");
            });
        }

        public async Task<RepoResponse<GetContactByEmailResponseDto>> GetContactByEmailAsync(string? contactsEmail)
        {
            return await ExecuteWithExceptionHandling("GetContactByEmail", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.GetContactByEmail);
                var parameters = new
                {
                    PRM_CONTACTS_EMAIL = contactsEmail
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetContactByEmailResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Contact");
            });
        }

        public async Task<RepoResponse<GetContactByIdentityResponseDto>> GetContactByIdentityAsync(string? contactsIdentityNumber)
        {
            return await ExecuteWithExceptionHandling("GetContactByIdentity", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.GetContactByIdentity);
                var parameters = new
                {
                    PRM_CONTACTS_IDENTITY_NUMBER = contactsIdentityNumber
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetContactByIdentityResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Contact");
            });
        }

        public async Task<RepoResponse<bool>> CheckContactByPhoneAsync(string contactsPhone)
        {
            return await ExecuteWithExceptionHandling("CheckContactByPhone", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.CheckContactByPhone);
                var parameters = new
                {
                    PRM_CONTACTS_PHONE = contactsPhone
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var exists = await connection.ExecuteScalarAsync<bool>(sql, parameters);
                return BuildBoolResponse(exists, $"Not found in Contact");
            });
        }

        public async Task<RepoResponse<bool>> CheckContactByEmailAsync(string? contactsEmail)
        {
            return await ExecuteWithExceptionHandling("CheckContactByEmail", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.CheckContactByEmail);
                var parameters = new
                {
                    PRM_CONTACTS_EMAIL = contactsEmail
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var exists = await connection.ExecuteScalarAsync<bool>(sql, parameters);
                return BuildBoolResponse(exists, $"Not found in Contact");
            });
        }

        public async Task<RepoResponse<long>> GetActiveContactsCountAsync(bool contactsIsActive)
        {
            return await ExecuteWithExceptionHandling("GetActiveContactsCount", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.GetActiveContactsCount);
                var parameters = new
                {
                    PRM_CONTACTS_IS_ACTIVE = contactsIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var result = await connection.ExecuteScalarAsync<long>(sql, parameters);
                return new RepoResponse<long>(result, "Success");
            });
        }

        public async Task<RepoResponse<List<GetContactsWithPagerResponseDto>>> GetContactsWithPagerAsync(bool contactsIsActive, int? pageNumber = null, int? pageSize = null)
        {
            pageNumber ??= ConfigurationConstants.MinPageNumber;
            pageSize ??= ConfigurationConstants.DefaultPageSize;
            return await ExecuteWithExceptionHandling("GetContactsWithPager", async () =>
            {
                if (pageNumber.HasValue && pageNumber < ConfigurationConstants.MinPageNumber)
                {
                    return new RepoResponse<List<GetContactsWithPagerResponseDto>>
                    {
                        Code = 404,
                        Message = $"Page Number must be greater than {ConfigurationConstants.MinPageNumber}"};
                }
                else
                {
                    var sql = SqlLoader.Load(SqlScripts.Contact.Query.GetContactsWithPager);
                    var startIndex = (pageNumber - 1) * pageSize;
                    var parameters = new
                    {
                        PRM_CONTACTS_IS_ACTIVE = contactsIsActive,
                        StartIndex = startIndex,
                        PageSize = pageSize
                    };
                    using var connection = await GetOpenConnectionAsync(_readContext);
                    var values = await connection.QueryAsync<GetContactsWithPagerResponseDto>(sql, parameters);
                    return BuildListResponse(values, "Not found in Contact");
                }
            });
        }

        public async Task<RepoResponse<List<GetFlatContactsForContactsResponseDto>>> GetFlatContactsForContactsAsync(int contactsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatContactsForContacts", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.GetFlatContactsForContacts);
                var parameters = new
                {
                    PRM_CONTACTS_ID = contactsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatContactsForContactsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Contact");
            });
        }

        public async Task<RepoResponse<GetFlatContactsForContactsResponseDto>> GetFlatContactsForContactsDetailsAsync(int contactsId, int flatContactsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatContactsForContactsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.GetFlatContactsForContactsDetails);
                var parameters = new
                {
                    PRM_FLAT_CONTACTS_ID = flatContactsId,
                    PRM_CONTACTS_ID = contactsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatContactsForContactsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Contact");
            });
        }

        public async Task<RepoResponse<List<GetSiteManagersForContactsResponseDto>>> GetSiteManagersForContactsAsync(int contactsId)
        {
            return await ExecuteWithExceptionHandling("GetSiteManagersForContacts", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.GetSiteManagersForContacts);
                var parameters = new
                {
                    PRM_CONTACTS_ID = contactsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetSiteManagersForContactsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Contact");
            });
        }

        public async Task<RepoResponse<GetSiteManagersForContactsResponseDto>> GetSiteManagersForContactsDetailsAsync(int contactsId, int siteManagersId)
        {
            return await ExecuteWithExceptionHandling("GetSiteManagersForContactsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Contact.Query.GetSiteManagersForContactsDetails);
                var parameters = new
                {
                    PRM_SITE_MANAGERS_ID = siteManagersId,
                    PRM_CONTACTS_ID = contactsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetSiteManagersForContactsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Contact");
            });
        }
    }
}