//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.PaymentMonth;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Persistence.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class PaymentMonthRepository : BaseRepository, IPaymentMonthRepository
    {
        public async Task<RepoResponse<List<GetAllMonthsResponseDto>>> GetAllMonthsAsync()
        {
            return await ExecuteWithExceptionHandling("GetAllMonths", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentMonth.Query.GetAllMonths);
                var parameters = new
                {
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetAllMonthsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentMonth");
            });
        }

        public async Task<RepoResponse<List<GetApartmentFeePlansForPaymentMonthsResponseDto>>> GetApartmentFeePlansForPaymentMonthsAsync(int paymentMonthsId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentFeePlansForPaymentMonths", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentMonth.Query.GetApartmentFeePlansForPaymentMonths);
                var parameters = new
                {
                    PRM_PAYMENT_MONTHS_ID = paymentMonthsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetApartmentFeePlansForPaymentMonthsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentMonth");
            });
        }

        public async Task<RepoResponse<GetApartmentFeePlansForPaymentMonthsResponseDto>> GetApartmentFeePlansForPaymentMonthsDetailsAsync(int paymentMonthsId, int apartmentFeePlansId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentFeePlansForPaymentMonthsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentMonth.Query.GetApartmentFeePlansForPaymentMonthsDetails);
                var parameters = new
                {
                    PRM_APARTMENT_FEE_PLANS_ID = apartmentFeePlansId,
                    PRM_PAYMENT_MONTHS_ID = paymentMonthsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetApartmentFeePlansForPaymentMonthsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in PaymentMonth");
            });
        }

        public async Task<RepoResponse<List<GetFlatPaymentsForPaymentMonthsResponseDto>>> GetFlatPaymentsForPaymentMonthsAsync(int paymentMonthsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForPaymentMonths", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentMonth.Query.GetFlatPaymentsForPaymentMonths);
                var parameters = new
                {
                    PRM_PAYMENT_MONTHS_ID = paymentMonthsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatPaymentsForPaymentMonthsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentMonth");
            });
        }

        public async Task<RepoResponse<GetFlatPaymentsForPaymentMonthsResponseDto>> GetFlatPaymentsForPaymentMonthsDetailsAsync(int paymentMonthsId, int flatPaymentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForPaymentMonthsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentMonth.Query.GetFlatPaymentsForPaymentMonthsDetails);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_ID = flatPaymentsId,
                    PRM_PAYMENT_MONTHS_ID = paymentMonthsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatPaymentsForPaymentMonthsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in PaymentMonth");
            });
        }

        public async Task<RepoResponse<List<GetCommonExpensesForPaymentMonthsResponseDto>>> GetCommonExpensesForPaymentMonthsAsync(int paymentMonthsId)
        {
            return await ExecuteWithExceptionHandling("GetCommonExpensesForPaymentMonths", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentMonth.Query.GetCommonExpensesForPaymentMonths);
                var parameters = new
                {
                    PRM_PAYMENT_MONTHS_ID = paymentMonthsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetCommonExpensesForPaymentMonthsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentMonth");
            });
        }

        public async Task<RepoResponse<GetCommonExpensesForPaymentMonthsResponseDto>> GetCommonExpensesForPaymentMonthsDetailsAsync(int paymentMonthsId, int commonExpensesId)
        {
            return await ExecuteWithExceptionHandling("GetCommonExpensesForPaymentMonthsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentMonth.Query.GetCommonExpensesForPaymentMonthsDetails);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_ID = commonExpensesId,
                    PRM_PAYMENT_MONTHS_ID = paymentMonthsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetCommonExpensesForPaymentMonthsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in PaymentMonth");
            });
        }
    }
}