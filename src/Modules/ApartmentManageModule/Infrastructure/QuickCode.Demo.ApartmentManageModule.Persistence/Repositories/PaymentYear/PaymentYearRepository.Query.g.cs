//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.PaymentYear;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Persistence.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class PaymentYearRepository : BaseRepository, IPaymentYearRepository
    {
        public async Task<RepoResponse<List<GetAllYearsResponseDto>>> GetAllYearsAsync()
        {
            return await ExecuteWithExceptionHandling("GetAllYears", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentYear.Query.GetAllYears);
                var parameters = new
                {
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetAllYearsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentYear");
            });
        }

        public async Task<RepoResponse<List<GetApartmentFeePlansForPaymentYearsResponseDto>>> GetApartmentFeePlansForPaymentYearsAsync(int paymentYearsId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentFeePlansForPaymentYears", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentYear.Query.GetApartmentFeePlansForPaymentYears);
                var parameters = new
                {
                    PRM_PAYMENT_YEARS_ID = paymentYearsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetApartmentFeePlansForPaymentYearsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentYear");
            });
        }

        public async Task<RepoResponse<GetApartmentFeePlansForPaymentYearsResponseDto>> GetApartmentFeePlansForPaymentYearsDetailsAsync(int paymentYearsId, int apartmentFeePlansId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentFeePlansForPaymentYearsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentYear.Query.GetApartmentFeePlansForPaymentYearsDetails);
                var parameters = new
                {
                    PRM_APARTMENT_FEE_PLANS_ID = apartmentFeePlansId,
                    PRM_PAYMENT_YEARS_ID = paymentYearsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetApartmentFeePlansForPaymentYearsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in PaymentYear");
            });
        }

        public async Task<RepoResponse<List<GetFlatPaymentsForPaymentYearsResponseDto>>> GetFlatPaymentsForPaymentYearsAsync(int paymentYearsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForPaymentYears", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentYear.Query.GetFlatPaymentsForPaymentYears);
                var parameters = new
                {
                    PRM_PAYMENT_YEARS_ID = paymentYearsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatPaymentsForPaymentYearsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentYear");
            });
        }

        public async Task<RepoResponse<GetFlatPaymentsForPaymentYearsResponseDto>> GetFlatPaymentsForPaymentYearsDetailsAsync(int paymentYearsId, int flatPaymentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForPaymentYearsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentYear.Query.GetFlatPaymentsForPaymentYearsDetails);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_ID = flatPaymentsId,
                    PRM_PAYMENT_YEARS_ID = paymentYearsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatPaymentsForPaymentYearsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in PaymentYear");
            });
        }

        public async Task<RepoResponse<List<GetCommonExpensesForPaymentYearsResponseDto>>> GetCommonExpensesForPaymentYearsAsync(int paymentYearsId)
        {
            return await ExecuteWithExceptionHandling("GetCommonExpensesForPaymentYears", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentYear.Query.GetCommonExpensesForPaymentYears);
                var parameters = new
                {
                    PRM_PAYMENT_YEARS_ID = paymentYearsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetCommonExpensesForPaymentYearsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in PaymentYear");
            });
        }

        public async Task<RepoResponse<GetCommonExpensesForPaymentYearsResponseDto>> GetCommonExpensesForPaymentYearsDetailsAsync(int paymentYearsId, int commonExpensesId)
        {
            return await ExecuteWithExceptionHandling("GetCommonExpensesForPaymentYearsDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.PaymentYear.Query.GetCommonExpensesForPaymentYearsDetails);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_ID = commonExpensesId,
                    PRM_PAYMENT_YEARS_ID = paymentYearsId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetCommonExpensesForPaymentYearsResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in PaymentYear");
            });
        }
    }
}