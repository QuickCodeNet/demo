//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.SiteManager;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Persistence.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class SiteManagerRepository : BaseRepository, ISiteManagerRepository
    {
        public async Task<RepoResponse<List<GetSiteManagersResponseDto>>> GetSiteManagersAsync(int siteManagersSiteId, bool siteManagersIsActive)
        {
            return await ExecuteWithExceptionHandling("GetSiteManagers", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.SiteManager.Query.GetSiteManagers);
                var parameters = new
                {
                    PRM_SITE_MANAGERS_SITE_ID = siteManagersSiteId,
                    PRM_SITE_MANAGERS_IS_ACTIVE = siteManagersIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetSiteManagersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in SiteManager");
            });
        }

        public async Task<RepoResponse<GetActiveManagerBySiteResponseDto>> GetActiveManagerBySiteAsync(int siteManagersSiteId, bool siteManagersIsActive)
        {
            return await ExecuteWithExceptionHandling("GetActiveManagerBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.SiteManager.Query.GetActiveManagerBySite);
                var parameters = new
                {
                    PRM_SITE_MANAGERS_SITE_ID = siteManagersSiteId,
                    PRM_SITE_MANAGERS_IS_ACTIVE = siteManagersIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetActiveManagerBySiteResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in SiteManager");
            });
        }

        public async Task<RepoResponse<List<GetSiteManagerWithContactResponseDto>>> GetSiteManagerWithContactAsync(int siteManagersContactId)
        {
            return await ExecuteWithExceptionHandling("GetSiteManagerWithContact", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.SiteManager.Query.GetSiteManagerWithContact);
                var parameters = new
                {
                    PRM_SITE_MANAGERS_CONTACT_ID = siteManagersContactId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetSiteManagerWithContactResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in SiteManager");
            });
        }

        public async Task<RepoResponse<bool>> CheckSiteHasManagerAsync(int siteManagersSiteId, bool siteManagersIsActive)
        {
            return await ExecuteWithExceptionHandling("CheckSiteHasManager", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.SiteManager.Query.CheckSiteHasManager);
                var parameters = new
                {
                    PRM_SITE_MANAGERS_SITE_ID = siteManagersSiteId,
                    PRM_SITE_MANAGERS_IS_ACTIVE = siteManagersIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var exists = await connection.ExecuteScalarAsync<bool>(sql, parameters);
                return BuildBoolResponse(exists, $"Not found in SiteManager");
            });
        }
    }
}