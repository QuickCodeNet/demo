//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.FlatExpenseInstallment;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Application.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class FlatExpenseInstallmentRepository : BaseRepository, IFlatExpenseInstallmentRepository
    {
        public async Task<RepoResponse<List<GetFlatExpenseInstallmentsResponseDto>>> GetFlatExpenseInstallmentsAsync(int flatExpenseInstallmentsFlatId, int flatExpenseInstallmentsExpenseId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatExpenseInstallment.Query.GetFlatExpenseInstallments);
                var parameters = new
                {
                    PRM_FLAT_EXPENSE_INSTALLMENTS_FLAT_ID = flatExpenseInstallmentsFlatId,
                    PRM_FLAT_EXPENSE_INSTALLMENTS_EXPENSE_ID = flatExpenseInstallmentsExpenseId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatExpenseInstallmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatExpenseInstallment");
            });
        }

        public async Task<RepoResponse<List<GetFlatUnpaidInstallmentsResponseDto>>> GetFlatUnpaidInstallmentsAsync(int flatExpenseInstallmentsFlatId, bool flatExpenseInstallmentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetFlatUnpaidInstallments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatExpenseInstallment.Query.GetFlatUnpaidInstallments);
                var parameters = new
                {
                    PRM_FLAT_EXPENSE_INSTALLMENTS_FLAT_ID = flatExpenseInstallmentsFlatId,
                    PRM_FLAT_EXPENSE_INSTALLMENTS_PAID = flatExpenseInstallmentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatUnpaidInstallmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatExpenseInstallment");
            });
        }

        public async Task<RepoResponse<List<GetFlatOverdueInstallmentsResponseDto>>> GetFlatOverdueInstallmentsAsync(int flatExpenseInstallmentsFlatId, bool flatExpenseInstallmentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetFlatOverdueInstallments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatExpenseInstallment.Query.GetFlatOverdueInstallments);
                var parameters = new
                {
                    PRM_FLAT_EXPENSE_INSTALLMENTS_FLAT_ID = flatExpenseInstallmentsFlatId,
                    PRM_FLAT_EXPENSE_INSTALLMENTS_PAID = flatExpenseInstallmentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatOverdueInstallmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatExpenseInstallment");
            });
        }

        public async Task<RepoResponse<List<GetApartmentFlatInstallmentsResponseDto>>> GetApartmentFlatInstallmentsAsync(int flatExpenseInstallmentsSiteId, int flatExpenseInstallmentsApartmentId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentFlatInstallments", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatExpenseInstallment.Query.GetApartmentFlatInstallments);
                var parameters = new
                {
                    PRM_FLAT_EXPENSE_INSTALLMENTS_SITE_ID = flatExpenseInstallmentsSiteId,
                    PRM_FLAT_EXPENSE_INSTALLMENTS_APARTMENT_ID = flatExpenseInstallmentsApartmentId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetApartmentFlatInstallmentsResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatExpenseInstallment");
            });
        }

        public async Task<RepoResponse<List<GetFlatTotalDebtResponseDto>>> GetFlatTotalDebtAsync(int flatExpenseInstallmentsFlatId, bool flatExpenseInstallmentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetFlatTotalDebt", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.FlatExpenseInstallment.Query.GetFlatTotalDebt);
                var parameters = new
                {
                    PRM_FLAT_EXPENSE_INSTALLMENTS_FLAT_ID = flatExpenseInstallmentsFlatId,
                    PRM_FLAT_EXPENSE_INSTALLMENTS_PAID = flatExpenseInstallmentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatTotalDebtResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in FlatExpenseInstallment");
            });
        }
    }
}