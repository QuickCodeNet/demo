//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.ApartmentManageModule.Domain.Entities;
using QuickCode.Demo.ApartmentManageModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.ApartmentManageModule.Persistence.Contexts;
using QuickCode.Demo.ApartmentManageModule.Application.Dtos.Site;
using QuickCode.Demo.ApartmentManageModule.Application.Mappings;
using QuickCode.Demo.ApartmentManageModule.Application.Sql;
using QuickCode.Demo.ApartmentManageModule.Domain.Enums;

namespace QuickCode.Demo.ApartmentManageModule.Persistence.Repositories
{
    public partial class SiteRepository : BaseRepository, ISiteRepository
    {
        public async Task<RepoResponse<List<GetActiveSitesResponseDto>>> GetActiveSitesAsync(bool sitesIsActive)
        {
            return await ExecuteWithExceptionHandling("GetActiveSites", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetActiveSites);
                var parameters = new
                {
                    PRM_SITES_IS_ACTIVE = sitesIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetActiveSitesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Site");
            });
        }

        public async Task<RepoResponse<GetSiteByIdResponseDto>> GetSiteByIdAsync(int sitesId)
        {
            return await ExecuteWithExceptionHandling("GetSiteById", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetSiteById);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetSiteByIdResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Site");
            });
        }

        public async Task<RepoResponse<long>> GetFlatsCountBySiteAsync(int sitesId, bool sitesIsActive)
        {
            return await ExecuteWithExceptionHandling("GetFlatsCountBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetFlatsCountBySite);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId,
                    PRM_SITES_IS_ACTIVE = sitesIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var result = await connection.ExecuteScalarAsync<long>(sql, parameters);
                return new RepoResponse<long>(result, "Success");
            });
        }

        public async Task<RepoResponse<long>> GetOwnersCountBySiteAsync(int sitesId, bool sitesIsActive, RelationshipType flatContactsRelationshipType)
        {
            return await ExecuteWithExceptionHandling("GetOwnersCountBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetOwnersCountBySite);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId,
                    PRM_FLAT_CONTACTS_RELATIONSHIP_TYPE = flatContactsRelationshipType,
                    PRM_SITES_IS_ACTIVE = sitesIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var result = await connection.ExecuteScalarAsync<long>(sql, parameters);
                return new RepoResponse<long>(result, "Success");
            });
        }

        public async Task<RepoResponse<long>> GetTenantsCountBySiteAsync(int sitesId, bool sitesIsActive, RelationshipType flatContactsRelationshipType)
        {
            return await ExecuteWithExceptionHandling("GetTenantsCountBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetTenantsCountBySite);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId,
                    PRM_FLAT_CONTACTS_RELATIONSHIP_TYPE = flatContactsRelationshipType,
                    PRM_SITES_IS_ACTIVE = sitesIsActive
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var result = await connection.ExecuteScalarAsync<long>(sql, parameters);
                return new RepoResponse<long>(result, "Success");
            });
        }

        public async Task<RepoResponse<GetTotalPaymentsBySiteResponseDto>> GetTotalPaymentsBySiteAsync(int sitesId, bool flatPaymentsPaid)
        {
            return await ExecuteWithExceptionHandling("GetTotalPaymentsBySite", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetTotalPaymentsBySite);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId,
                    PRM_FLAT_PAYMENTS_PAID = flatPaymentsPaid
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetTotalPaymentsBySiteResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Site");
            });
        }

        public async Task<RepoResponse<List<GetApartmentsForSitesResponseDto>>> GetApartmentsForSitesAsync(int sitesId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentsForSites", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetApartmentsForSites);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetApartmentsForSitesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Site");
            });
        }

        public async Task<RepoResponse<GetApartmentsForSitesResponseDto>> GetApartmentsForSitesDetailsAsync(int sitesId, int apartmentsId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentsForSitesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetApartmentsForSitesDetails);
                var parameters = new
                {
                    PRM_APARTMENTS_ID = apartmentsId,
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetApartmentsForSitesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Site");
            });
        }

        public async Task<RepoResponse<List<GetFlatsForSitesResponseDto>>> GetFlatsForSitesAsync(int sitesId)
        {
            return await ExecuteWithExceptionHandling("GetFlatsForSites", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetFlatsForSites);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatsForSitesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Site");
            });
        }

        public async Task<RepoResponse<GetFlatsForSitesResponseDto>> GetFlatsForSitesDetailsAsync(int sitesId, int flatsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatsForSitesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetFlatsForSitesDetails);
                var parameters = new
                {
                    PRM_FLATS_ID = flatsId,
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatsForSitesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Site");
            });
        }

        public async Task<RepoResponse<List<GetSiteManagersForSitesResponseDto>>> GetSiteManagersForSitesAsync(int sitesId)
        {
            return await ExecuteWithExceptionHandling("GetSiteManagersForSites", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetSiteManagersForSites);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetSiteManagersForSitesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Site");
            });
        }

        public async Task<RepoResponse<GetSiteManagersForSitesResponseDto>> GetSiteManagersForSitesDetailsAsync(int sitesId, int siteManagersId)
        {
            return await ExecuteWithExceptionHandling("GetSiteManagersForSitesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetSiteManagersForSitesDetails);
                var parameters = new
                {
                    PRM_SITE_MANAGERS_ID = siteManagersId,
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetSiteManagersForSitesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Site");
            });
        }

        public async Task<RepoResponse<List<GetFlatPaymentsForSitesResponseDto>>> GetFlatPaymentsForSitesAsync(int sitesId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForSites", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetFlatPaymentsForSites);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatPaymentsForSitesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Site");
            });
        }

        public async Task<RepoResponse<GetFlatPaymentsForSitesResponseDto>> GetFlatPaymentsForSitesDetailsAsync(int sitesId, int flatPaymentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatPaymentsForSitesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetFlatPaymentsForSitesDetails);
                var parameters = new
                {
                    PRM_FLAT_PAYMENTS_ID = flatPaymentsId,
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatPaymentsForSitesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Site");
            });
        }

        public async Task<RepoResponse<List<GetCommonExpensesForSitesResponseDto>>> GetCommonExpensesForSitesAsync(int sitesId)
        {
            return await ExecuteWithExceptionHandling("GetCommonExpensesForSites", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetCommonExpensesForSites);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetCommonExpensesForSitesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Site");
            });
        }

        public async Task<RepoResponse<GetCommonExpensesForSitesResponseDto>> GetCommonExpensesForSitesDetailsAsync(int sitesId, int commonExpensesId)
        {
            return await ExecuteWithExceptionHandling("GetCommonExpensesForSitesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetCommonExpensesForSitesDetails);
                var parameters = new
                {
                    PRM_COMMON_EXPENSES_ID = commonExpensesId,
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetCommonExpensesForSitesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Site");
            });
        }

        public async Task<RepoResponse<List<GetApartmentFeePlansForSitesResponseDto>>> GetApartmentFeePlansForSitesAsync(int sitesId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentFeePlansForSites", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetApartmentFeePlansForSites);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetApartmentFeePlansForSitesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Site");
            });
        }

        public async Task<RepoResponse<GetApartmentFeePlansForSitesResponseDto>> GetApartmentFeePlansForSitesDetailsAsync(int sitesId, int apartmentFeePlansId)
        {
            return await ExecuteWithExceptionHandling("GetApartmentFeePlansForSitesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetApartmentFeePlansForSitesDetails);
                var parameters = new
                {
                    PRM_APARTMENT_FEE_PLANS_ID = apartmentFeePlansId,
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetApartmentFeePlansForSitesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Site");
            });
        }

        public async Task<RepoResponse<List<GetExpenseInstallmentsForSitesResponseDto>>> GetExpenseInstallmentsForSitesAsync(int sitesId)
        {
            return await ExecuteWithExceptionHandling("GetExpenseInstallmentsForSites", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetExpenseInstallmentsForSites);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetExpenseInstallmentsForSitesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Site");
            });
        }

        public async Task<RepoResponse<GetExpenseInstallmentsForSitesResponseDto>> GetExpenseInstallmentsForSitesDetailsAsync(int sitesId, int expenseInstallmentsId)
        {
            return await ExecuteWithExceptionHandling("GetExpenseInstallmentsForSitesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetExpenseInstallmentsForSitesDetails);
                var parameters = new
                {
                    PRM_EXPENSE_INSTALLMENTS_ID = expenseInstallmentsId,
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetExpenseInstallmentsForSitesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Site");
            });
        }

        public async Task<RepoResponse<List<GetFlatExpenseInstallmentsForSitesResponseDto>>> GetFlatExpenseInstallmentsForSitesAsync(int sitesId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForSites", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetFlatExpenseInstallmentsForSites);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetFlatExpenseInstallmentsForSitesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Site");
            });
        }

        public async Task<RepoResponse<GetFlatExpenseInstallmentsForSitesResponseDto>> GetFlatExpenseInstallmentsForSitesDetailsAsync(int sitesId, int flatExpenseInstallmentsId)
        {
            return await ExecuteWithExceptionHandling("GetFlatExpenseInstallmentsForSitesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetFlatExpenseInstallmentsForSitesDetails);
                var parameters = new
                {
                    PRM_FLAT_EXPENSE_INSTALLMENTS_ID = flatExpenseInstallmentsId,
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetFlatExpenseInstallmentsForSitesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Site");
            });
        }

        public async Task<RepoResponse<List<GetUserSiteAccessesForSitesResponseDto>>> GetUserSiteAccessesForSitesAsync(int sitesId)
        {
            return await ExecuteWithExceptionHandling("GetUserSiteAccessesForSites", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetUserSiteAccessesForSites);
                var parameters = new
                {
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetUserSiteAccessesForSitesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in Site");
            });
        }

        public async Task<RepoResponse<GetUserSiteAccessesForSitesResponseDto>> GetUserSiteAccessesForSitesDetailsAsync(int sitesId, int userSiteAccessesId)
        {
            return await ExecuteWithExceptionHandling("GetUserSiteAccessesForSitesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.Site.Query.GetUserSiteAccessesForSitesDetails);
                var parameters = new
                {
                    PRM_USER_SITE_ACCESSES_ID = userSiteAccessesId,
                    PRM_SITES_ID = sitesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetUserSiteAccessesForSitesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in Site");
            });
        }
    }
}