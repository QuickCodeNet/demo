//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.SmsManagerModule.Domain.Entities;
using QuickCode.Demo.SmsManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.SmsManagerModule.Persistence.Contexts;
using QuickCode.Demo.SmsManagerModule.Application.Dtos.CampaignType;
using QuickCode.Demo.SmsManagerModule.Application.Mappings;
using QuickCode.Demo.SmsManagerModule.Application.Sql;

namespace QuickCode.Demo.SmsManagerModule.Persistence.Repositories
{
    public partial class CampaignTypeRepository : BaseRepository, ICampaignTypeRepository
    {
        public async Task<RepoResponse<List<GetCampaignMessagesForCampaignTypesResponseDto>>> GetCampaignMessagesForCampaignTypesAsync(int campaignTypesId)
        {
            return await ExecuteWithExceptionHandling("GetCampaignMessagesForCampaignTypes", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CampaignType.Query.GetCampaignMessagesForCampaignTypes);
                var parameters = new
                {
                    PRM_CAMPAIGN_TYPES_ID = campaignTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetCampaignMessagesForCampaignTypesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in CampaignType");
            });
        }

        public async Task<RepoResponse<GetCampaignMessagesForCampaignTypesResponseDto>> GetCampaignMessagesForCampaignTypesDetailsAsync(int campaignTypesId, int campaignMessagesId)
        {
            return await ExecuteWithExceptionHandling("GetCampaignMessagesForCampaignTypesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.CampaignType.Query.GetCampaignMessagesForCampaignTypesDetails);
                var parameters = new
                {
                    PRM_CAMPAIGN_MESSAGES_ID = campaignMessagesId,
                    PRM_CAMPAIGN_TYPES_ID = campaignTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetCampaignMessagesForCampaignTypesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in CampaignType");
            });
        }
    }
}