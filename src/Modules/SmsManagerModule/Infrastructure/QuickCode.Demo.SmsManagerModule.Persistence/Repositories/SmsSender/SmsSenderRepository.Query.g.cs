//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.SmsManagerModule.Domain.Entities;
using QuickCode.Demo.SmsManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.SmsManagerModule.Persistence.Contexts;
using QuickCode.Demo.SmsManagerModule.Application.Dtos.SmsSender;
using QuickCode.Demo.SmsManagerModule.Application.Mappings;
using QuickCode.Demo.SmsManagerModule.Persistence.Sql;

namespace QuickCode.Demo.SmsManagerModule.Persistence.Repositories
{
    public partial class SmsSenderRepository : BaseRepository, ISmsSenderRepository
    {
        public async Task<RepoResponse<List<GetInfoMessagesForSmsSendersResponseDto>>> GetInfoMessagesForSmsSendersAsync(int smsSendersId)
        {
            return await ExecuteWithExceptionHandling("GetInfoMessagesForSmsSenders", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.SmsSender.Query.GetInfoMessagesForSmsSenders);
                var parameters = new
                {
                    PRM_SMS_SENDERS_ID = smsSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetInfoMessagesForSmsSendersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in SmsSender");
            });
        }

        public async Task<RepoResponse<GetInfoMessagesForSmsSendersResponseDto>> GetInfoMessagesForSmsSendersDetailsAsync(int smsSendersId, int infoMessagesId)
        {
            return await ExecuteWithExceptionHandling("GetInfoMessagesForSmsSendersDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.SmsSender.Query.GetInfoMessagesForSmsSendersDetails);
                var parameters = new
                {
                    PRM_INFO_MESSAGES_ID = infoMessagesId,
                    PRM_SMS_SENDERS_ID = smsSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetInfoMessagesForSmsSendersResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in SmsSender");
            });
        }

        public async Task<RepoResponse<List<GetOtpMessagesForSmsSendersResponseDto>>> GetOtpMessagesForSmsSendersAsync(int smsSendersId)
        {
            return await ExecuteWithExceptionHandling("GetOtpMessagesForSmsSenders", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.SmsSender.Query.GetOtpMessagesForSmsSenders);
                var parameters = new
                {
                    PRM_SMS_SENDERS_ID = smsSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetOtpMessagesForSmsSendersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in SmsSender");
            });
        }

        public async Task<RepoResponse<GetOtpMessagesForSmsSendersResponseDto>> GetOtpMessagesForSmsSendersDetailsAsync(int smsSendersId, int otpMessagesId)
        {
            return await ExecuteWithExceptionHandling("GetOtpMessagesForSmsSendersDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.SmsSender.Query.GetOtpMessagesForSmsSendersDetails);
                var parameters = new
                {
                    PRM_OTP_MESSAGES_ID = otpMessagesId,
                    PRM_SMS_SENDERS_ID = smsSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetOtpMessagesForSmsSendersResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in SmsSender");
            });
        }

        public async Task<RepoResponse<List<GetCampaignMessagesForSmsSendersResponseDto>>> GetCampaignMessagesForSmsSendersAsync(int smsSendersId)
        {
            return await ExecuteWithExceptionHandling("GetCampaignMessagesForSmsSenders", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.SmsSender.Query.GetCampaignMessagesForSmsSenders);
                var parameters = new
                {
                    PRM_SMS_SENDERS_ID = smsSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetCampaignMessagesForSmsSendersResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in SmsSender");
            });
        }

        public async Task<RepoResponse<GetCampaignMessagesForSmsSendersResponseDto>> GetCampaignMessagesForSmsSendersDetailsAsync(int smsSendersId, int campaignMessagesId)
        {
            return await ExecuteWithExceptionHandling("GetCampaignMessagesForSmsSendersDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.SmsSender.Query.GetCampaignMessagesForSmsSendersDetails);
                var parameters = new
                {
                    PRM_CAMPAIGN_MESSAGES_ID = campaignMessagesId,
                    PRM_SMS_SENDERS_ID = smsSendersId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetCampaignMessagesForSmsSendersResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in SmsSender");
            });
        }
    }
}