//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.Common.Models;
using QuickCode.Demo.SmsManagerModule.Domain.Entities;
using QuickCode.Demo.SmsManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.Common;
using QuickCode.Demo.Common.Extensions;
using QuickCode.Demo.Common.Helpers;
using QuickCode.Demo.SmsManagerModule.Persistence.Contexts;
using QuickCode.Demo.SmsManagerModule.Application.Dtos.InfoType;
using QuickCode.Demo.SmsManagerModule.Application.Mappings;
using QuickCode.Demo.SmsManagerModule.Persistence.Sql;

namespace QuickCode.Demo.SmsManagerModule.Persistence.Repositories
{
    public partial class InfoTypeRepository : BaseRepository, IInfoTypeRepository
    {
        public async Task<RepoResponse<List<GetInfoMessagesForInfoTypesResponseDto>>> GetInfoMessagesForInfoTypesAsync(int infoTypesId)
        {
            return await ExecuteWithExceptionHandling("GetInfoMessagesForInfoTypes", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.InfoType.Query.GetInfoMessagesForInfoTypes);
                var parameters = new
                {
                    PRM_INFO_TYPES_ID = infoTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var values = await connection.QueryAsync<GetInfoMessagesForInfoTypesResponseDto>(sql, parameters);
                return BuildListResponse(values, "Not found in InfoType");
            });
        }

        public async Task<RepoResponse<GetInfoMessagesForInfoTypesResponseDto>> GetInfoMessagesForInfoTypesDetailsAsync(int infoTypesId, int infoMessagesId)
        {
            return await ExecuteWithExceptionHandling("GetInfoMessagesForInfoTypesDetails", async () =>
            {
                var sql = SqlLoader.Load(SqlScripts.InfoType.Query.GetInfoMessagesForInfoTypesDetails);
                var parameters = new
                {
                    PRM_INFO_MESSAGES_ID = infoMessagesId,
                    PRM_INFO_TYPES_ID = infoTypesId
                };
                using var connection = await GetOpenConnectionAsync(_readContext);
                var value = await connection.QueryFirstOrDefaultAsync<GetInfoMessagesForInfoTypesResponseDto>(sql, parameters);
                return BuildResponse(value, "Not found in InfoType");
            });
        }
    }
}