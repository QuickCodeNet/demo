//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace QuickCode.Demo.Common.Nswag.Clients.EmailManagerModuleApi.Contracts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICampaignMessagesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CampaignMessageDto>> CampaignMessagesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CampaignMessageDto> CampaignMessagesInsertAsync(CampaignMessageDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CampaignMessagesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CampaignMessageDto> CampaignMessagesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CampaignMessagesUpdateAsync(int id, CampaignMessageDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CampaignMessagesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICampaignTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CampaignTypeDto>> CampaignTypesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CampaignTypeDto> CampaignTypesInsertAsync(CampaignTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CampaignTypesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CampaignTypeDto> CampaignTypesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CampaignTypesUpdateAsync(int id, CampaignTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CampaignTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetCampaignMessagesForCampaignTypesResponseDto>> CampaignTypesGetCampaignMessagesForCampaignTypesAsync(string campaignTypeId, int? campaignTypesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCampaignMessagesForCampaignTypesResponseDto> CampaignTypesGetCampaignMessagesForCampaignTypesDetailsAsync(string campaignTypeId, string campaignMessageId, int? campaignTypesId = null, int? campaignMessagesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEmailSendersClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EmailSenderDto>> EmailSendersListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EmailSenderDto> EmailSendersInsertAsync(EmailSenderDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> EmailSendersCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EmailSenderDto> EmailSendersGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> EmailSendersUpdateAsync(int id, EmailSenderDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> EmailSendersDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetInfoMessagesForEmailSendersResponseDto>> EmailSendersGetInfoMessagesForEmailSendersAsync(string emailSenderId, int? emailSendersId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInfoMessagesForEmailSendersResponseDto> EmailSendersGetInfoMessagesForEmailSendersDetailsAsync(string emailSenderId, string infoMessageId, int? emailSendersId = null, int? infoMessagesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetOtpMessagesForEmailSendersResponseDto>> EmailSendersGetOtpMessagesForEmailSendersAsync(string emailSenderId, int? emailSendersId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetOtpMessagesForEmailSendersResponseDto> EmailSendersGetOtpMessagesForEmailSendersDetailsAsync(string emailSenderId, string otpMessageId, int? emailSendersId = null, int? otpMessagesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetCampaignMessagesForEmailSendersResponseDto>> EmailSendersGetCampaignMessagesForEmailSendersAsync(string emailSenderId, int? emailSendersId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCampaignMessagesForEmailSendersResponseDto> EmailSendersGetCampaignMessagesForEmailSendersDetailsAsync(string emailSenderId, string campaignMessageId, int? emailSendersId = null, int? campaignMessagesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IErrorClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErrorHandleErrorAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IInfoMessagesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InfoMessageDto>> InfoMessagesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoMessageDto> InfoMessagesInsertAsync(InfoMessageDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> InfoMessagesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoMessageDto> InfoMessagesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> InfoMessagesUpdateAsync(int id, InfoMessageDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> InfoMessagesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IInfoTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InfoTypeDto>> InfoTypesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoTypeDto> InfoTypesInsertAsync(InfoTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> InfoTypesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoTypeDto> InfoTypesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> InfoTypesUpdateAsync(int id, InfoTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> InfoTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetInfoMessagesForInfoTypesResponseDto>> InfoTypesGetInfoMessagesForInfoTypesAsync(string infoTypeId, int? infoTypesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInfoMessagesForInfoTypesResponseDto> InfoTypesGetInfoMessagesForInfoTypesDetailsAsync(string infoTypeId, string infoMessageId, int? infoTypesId = null, int? infoMessagesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOtpMessagesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OtpMessageDto>> OtpMessagesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OtpMessageDto> OtpMessagesInsertAsync(OtpMessageDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> OtpMessagesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OtpMessageDto> OtpMessagesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> OtpMessagesUpdateAsync(int id, OtpMessageDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> OtpMessagesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOtpTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OtpTypeDto>> OtpTypesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OtpTypeDto> OtpTypesInsertAsync(OtpTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> OtpTypesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OtpTypeDto> OtpTypesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> OtpTypesUpdateAsync(int id, OtpTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> OtpTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetOtpMessagesForOtpTypesResponseDto>> OtpTypesGetOtpMessagesForOtpTypesAsync(string otpTypeId, int? otpTypesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetOtpMessagesForOtpTypesResponseDto> OtpTypesGetOtpMessagesForOtpTypesDetailsAsync(string otpTypeId, string otpMessageId, int? otpTypesId = null, int? otpMessagesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignMessageDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("campaignTypeId")]
        public int CampaignTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CampaignMessageDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<CampaignMessageDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignTypeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        public string Template { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CampaignTypeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<CampaignTypeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCampaignMessagesForCampaignTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("campaignTypeId")]
        public int CampaignTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetCampaignMessagesForCampaignTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetCampaignMessagesForCampaignTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailSenderDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerName")]
        public string ProviderName { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static EmailSenderDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<EmailSenderDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCampaignMessagesForEmailSendersResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("campaignTypeId")]
        public int CampaignTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetCampaignMessagesForEmailSendersResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetCampaignMessagesForEmailSendersResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInfoMessagesForEmailSendersResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("infoTypeId")]
        public int InfoTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetInfoMessagesForEmailSendersResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetInfoMessagesForEmailSendersResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOtpMessagesForEmailSendersResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpTypeId")]
        public int OtpTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpCode")]
        public string OtpCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expireSeconds")]
        public int ExpireSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetOtpMessagesForEmailSendersResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetOtpMessagesForEmailSendersResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InfoMessageDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("infoTypeId")]
        public int InfoTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InfoMessageDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<InfoMessageDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInfoMessagesForInfoTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("infoTypeId")]
        public int InfoTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetInfoMessagesForInfoTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetInfoMessagesForInfoTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InfoTypeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        public string Template { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InfoTypeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<InfoTypeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtpMessageDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpTypeId")]
        public int OtpTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpCode")]
        public string OtpCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expireSeconds")]
        public int ExpireSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OtpMessageDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<OtpMessageDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOtpMessagesForOtpTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpTypeId")]
        public int OtpTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpCode")]
        public string OtpCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expireSeconds")]
        public int ExpireSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetOtpMessagesForOtpTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetOtpMessagesForOtpTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtpTypeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        public string Template { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OtpTypeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<OtpTypeDto>(data, options);

        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625