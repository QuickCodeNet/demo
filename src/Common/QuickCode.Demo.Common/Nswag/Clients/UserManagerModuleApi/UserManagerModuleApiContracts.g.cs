//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace QuickCode.Demo.Common.Nswag.Clients.UserManagerModuleApi.Contracts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IApiMethodDefinitionsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiModulePermissions> ApiMethodDefinitionsGetApiPermissionsAsync(string permissionGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApiMethodDefinitionsUpdateApiPermissionAsync(UpdateApiPermissionGroupRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ApiMethodDefinitionDto>> ApiMethodDefinitionsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiMethodDefinitionDto> ApiMethodDefinitionsInsertAsync(ApiMethodDefinitionDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> ApiMethodDefinitionsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiMethodDefinitionDto> ApiMethodDefinitionsGetItemAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApiMethodDefinitionsUpdateAsync(string key, ApiMethodDefinitionDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApiMethodDefinitionsDeleteAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetKafkaEventsForApiMethodDefinitionsResponseDto>> ApiMethodDefinitionsGetKafkaEventsForApiMethodDefinitionsAsync(string apiMethodDefinitionKey, string apiMethodDefinitionsKey = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetKafkaEventsForApiMethodDefinitionsResponseDto> ApiMethodDefinitionsGetKafkaEventsForApiMethodDefinitionsDetailsAsync(string apiMethodDefinitionKey, string kafkaEventTopicName, string apiMethodDefinitionsKey = null, string kafkaEventsTopicName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetApiPermissionGroupsForApiMethodDefinitionsResponseDto>> ApiMethodDefinitionsGetApiPermissionGroupsForApiMethodDefinitionsAsync(string apiMethodDefinitionKey, string apiMethodDefinitionsKey = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetApiPermissionGroupsForApiMethodDefinitionsResponseDto> ApiMethodDefinitionsGetApiPermissionGroupsForApiMethodDefinitionsDetailsAsync(string apiMethodDefinitionKey, string apiPermissionGroupPermissionGroupName, string apiMethodDefinitionsKey = null, string apiPermissionGroupsPermissionGroupName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IApiPermissionGroupsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ApiPermissionGroupDto>> ApiPermissionGroupsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiPermissionGroupDto> ApiPermissionGroupsInsertAsync(ApiPermissionGroupDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> ApiPermissionGroupsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiPermissionGroupDto> ApiPermissionGroupsGetItemAsync(string permissionGroupName, string apiMethodDefinitionKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApiPermissionGroupsUpdateAsync(string permissionGroupName, string apiMethodDefinitionKey, ApiPermissionGroupDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApiPermissionGroupsDeleteAsync(string permissionGroupName, string apiMethodDefinitionKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetApiPermissionGroupNamesResponseDto>> ApiPermissionGroupsGetApiPermissionGroupNamesAsync(string apiPermissionGroupsPermissionGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetRoleClaimsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetRoleClaimDto>> AspNetRoleClaimsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetRoleClaimDto> AspNetRoleClaimsInsertAsync(AspNetRoleClaimDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> AspNetRoleClaimsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetRoleClaimDto> AspNetRoleClaimsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetRoleClaimsUpdateAsync(int id, AspNetRoleClaimDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetRoleClaimsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetRolesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetRoleDto>> AspNetRolesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetRoleDto> AspNetRolesInsertAsync(AspNetRoleDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> AspNetRolesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetRoleDto> AspNetRolesGetItemAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetRolesUpdateAsync(string id, AspNetRoleDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetRolesDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetAspNetUserRolesForAspNetRolesResponseDto>> AspNetRolesGetAspNetUserRolesForAspNetRolesAsync(string aspNetRoleId, string aspNetRolesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAspNetUserRolesForAspNetRolesResponseDto> AspNetRolesGetAspNetUserRolesForAspNetRolesDetailsAsync(string aspNetRoleId, string aspNetUserRoleUserId, string aspNetRolesId = null, string aspNetUserRolesUserId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetAspNetRoleClaimsForAspNetRolesResponseDto>> AspNetRolesGetAspNetRoleClaimsForAspNetRolesAsync(string aspNetRoleId, string aspNetRolesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAspNetRoleClaimsForAspNetRolesResponseDto> AspNetRolesGetAspNetRoleClaimsForAspNetRolesDetailsAsync(string aspNetRoleId, string aspNetRoleClaimId, string aspNetRolesId = null, int? aspNetRoleClaimsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetUserClaimsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUserClaimDto>> AspNetUserClaimsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserClaimDto> AspNetUserClaimsInsertAsync(AspNetUserClaimDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> AspNetUserClaimsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserClaimDto> AspNetUserClaimsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserClaimsUpdateAsync(int id, AspNetUserClaimDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserClaimsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetUserLoginsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUserLoginDto>> AspNetUserLoginsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserLoginDto> AspNetUserLoginsInsertAsync(AspNetUserLoginDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> AspNetUserLoginsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserLoginDto> AspNetUserLoginsGetItemAsync(string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserLoginsUpdateAsync(string loginProvider, string providerKey, AspNetUserLoginDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserLoginsDeleteAsync(string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetUserRolesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUserRoleDto>> AspNetUserRolesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserRoleDto> AspNetUserRolesInsertAsync(AspNetUserRoleDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> AspNetUserRolesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserRoleDto> AspNetUserRolesGetItemAsync(string userId, string roleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserRolesUpdateAsync(string userId, string roleId, AspNetUserRoleDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserRolesDeleteAsync(string userId, string roleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetUsersClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUserDto>> AspNetUsersListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserDto> AspNetUsersInsertAsync(AspNetUserDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> AspNetUsersCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserDto> AspNetUsersGetItemAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUsersUpdateAsync(string id, AspNetUserDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUsersDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetUserResponseDto> AspNetUsersGetUserAsync(string aspNetUsersEmail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetAspNetUserRolesForAspNetUsersResponseDto>> AspNetUsersGetAspNetUserRolesForAspNetUsersAsync(string aspNetUserId, string aspNetUsersId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAspNetUserRolesForAspNetUsersResponseDto> AspNetUsersGetAspNetUserRolesForAspNetUsersDetailsAsync(string aspNetUserId, string aspNetUserRoleUserId, string aspNetUsersId = null, string aspNetUserRolesUserId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetAspNetUserClaimsForAspNetUsersResponseDto>> AspNetUsersGetAspNetUserClaimsForAspNetUsersAsync(string aspNetUserId, string aspNetUsersId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAspNetUserClaimsForAspNetUsersResponseDto> AspNetUsersGetAspNetUserClaimsForAspNetUsersDetailsAsync(string aspNetUserId, string aspNetUserClaimId, string aspNetUsersId = null, int? aspNetUserClaimsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetAspNetUserTokensForAspNetUsersResponseDto>> AspNetUsersGetAspNetUserTokensForAspNetUsersAsync(string aspNetUserId, string aspNetUsersId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAspNetUserTokensForAspNetUsersResponseDto> AspNetUsersGetAspNetUserTokensForAspNetUsersDetailsAsync(string aspNetUserId, string aspNetUserTokenUserId, string aspNetUsersId = null, string aspNetUserTokensUserId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetAspNetUserLoginsForAspNetUsersResponseDto>> AspNetUsersGetAspNetUserLoginsForAspNetUsersAsync(string aspNetUserId, string aspNetUsersId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAspNetUserLoginsForAspNetUsersResponseDto> AspNetUsersGetAspNetUserLoginsForAspNetUsersDetailsAsync(string aspNetUserId, string aspNetUserLoginLoginProvider, string aspNetUsersId = null, string aspNetUserLoginsLoginProvider = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetRefreshTokensForAspNetUsersResponseDto>> AspNetUsersGetRefreshTokensForAspNetUsersAsync(string aspNetUserId, string aspNetUsersId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetRefreshTokensForAspNetUsersResponseDto> AspNetUsersGetRefreshTokensForAspNetUsersDetailsAsync(string aspNetUserId, string refreshTokenId, string aspNetUsersId = null, int? refreshTokensId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetUserTokensClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUserTokenDto>> AspNetUserTokensListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserTokenDto> AspNetUserTokensInsertAsync(AspNetUserTokenDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> AspNetUserTokensCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserTokenDto> AspNetUserTokensGetItemAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserTokensUpdateAsync(string userId, AspNetUserTokenDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserTokensDeleteAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAuthenticationsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ApiAuthRegisterPostAsync(CustomRegisterRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> ApiAuthLoginPostAsync(LoginRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApiAuthValidatePostAsync(string body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> ApiAuthRefreshPostAsync(RefreshRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ApiAuthConfirmEmailGetAsync(string userId = null, string code = null, string changedEmail = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ApiAuthResendConfirmationEmailPostAsync(ResendConfirmationEmailRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ApiAuthForgotPasswordPostAsync(ForgotPasswordRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ApiAuthResetPasswordPostAsync(ResetPasswordRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwoFactorResponse> ApiAuthManageUser2faPostAsync(TwoFactorRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoResponse> ApiAuthManageInfoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoResponse> ApiAuthManageInfoPostAsync(InfoRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IColumnTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ColumnTypeDto>> ColumnTypesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ColumnTypeDto> ColumnTypesInsertAsync(ColumnTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> ColumnTypesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ColumnTypeDto> ColumnTypesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ColumnTypesUpdateAsync(int id, ColumnTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ColumnTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IErrorClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErrorHandleErrorAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IKafkaEventsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<KafkaEventDto>> KafkaEventsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KafkaEventDto> KafkaEventsInsertAsync(KafkaEventDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> KafkaEventsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KafkaEventDto> KafkaEventsGetItemAsync(string topicName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> KafkaEventsUpdateAsync(string topicName, KafkaEventDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> KafkaEventsDeleteAsync(string topicName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetKafkaEventsResponseDto>> KafkaEventsGetKafkaEventsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetActiveKafkaEventsResponseDto>> KafkaEventsGetActiveKafkaEventsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetTopicWorkflowsResponseDto>> KafkaEventsGetTopicWorkflowsAsync(string kafkaEventsTopicName, HttpMethodType apiMethodDefinitionsHttpMethod, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetTopicWorkflowsForKafkaEventsResponseDto>> KafkaEventsGetTopicWorkflowsForKafkaEventsAsync(string kafkaEventTopicName, string kafkaEventsTopicName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTopicWorkflowsForKafkaEventsResponseDto> KafkaEventsGetTopicWorkflowsForKafkaEventsDetailsAsync(string kafkaEventTopicName, string topicWorkflowId, string kafkaEventsTopicName = null, int? topicWorkflowsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPermissionGroupsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PermissionGroupDto>> PermissionGroupsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionGroupDto> PermissionGroupsInsertAsync(PermissionGroupDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> PermissionGroupsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionGroupDto> PermissionGroupsGetItemAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PermissionGroupsUpdateAsync(string name, PermissionGroupDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PermissionGroupsDeleteAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetAspNetUsersForPermissionGroupsResponseDto>> PermissionGroupsGetAspNetUsersForPermissionGroupsAsync(string permissionGroupName, string permissionGroupsName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAspNetUsersForPermissionGroupsResponseDto> PermissionGroupsGetAspNetUsersForPermissionGroupsDetailsAsync(string permissionGroupName, string aspNetUserId, string permissionGroupsName = null, string aspNetUsersId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetPortalPermissionGroupsForPermissionGroupsResponseDto>> PermissionGroupsGetPortalPermissionGroupsForPermissionGroupsAsync(string permissionGroupName, string permissionGroupsName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPortalPermissionGroupsForPermissionGroupsResponseDto> PermissionGroupsGetPortalPermissionGroupsForPermissionGroupsDetailsAsync(string permissionGroupName, string portalPermissionGroupPortalPermissionName, string permissionGroupsName = null, string portalPermissionGroupsPortalPermissionName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetApiPermissionGroupsForPermissionGroupsResponseDto>> PermissionGroupsGetApiPermissionGroupsForPermissionGroupsAsync(string permissionGroupName, string permissionGroupsName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetApiPermissionGroupsForPermissionGroupsResponseDto> PermissionGroupsGetApiPermissionGroupsForPermissionGroupsDetailsAsync(string permissionGroupName, string apiPermissionGroupPermissionGroupName, string permissionGroupsName = null, string apiPermissionGroupsPermissionGroupName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPortalMenusClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalMenuDto>> PortalMenusListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalMenuDto> PortalMenusInsertAsync(PortalMenuDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> PortalMenusCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalMenuDto> PortalMenusGetItemAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalMenusUpdateAsync(string key, PortalMenuDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalMenusDeleteAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPortalPermissionGroupsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalPermissionGroupDto>> PortalPermissionGroupsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionGroupDto> PortalPermissionGroupsInsertAsync(PortalPermissionGroupDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> PortalPermissionGroupsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionGroupDto> PortalPermissionGroupsGetItemAsync(string portalPermissionName, string permissionGroupName, int portalPermissionTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionGroupsUpdateAsync(string portalPermissionName, string permissionGroupName, int portalPermissionTypeId, PortalPermissionGroupDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionGroupsDeleteAsync(string portalPermissionName, string permissionGroupName, int portalPermissionTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetPortalPermissionGroupsResponseDto>> PortalPermissionGroupsGetPortalPermissionGroupsAsync(string portalPermissionGroupsPermissionGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetPortalPermissionGroupResponseDto>> PortalPermissionGroupsGetPortalPermissionGroupAsync(string portalPermissionGroupsPortalPermissionName, string portalPermissionGroupsPermissionGroupName, int portalPermissionGroupsPortalPermissionTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPortalPermissionsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionGroupList> PortalPermissionsGetPortalPermissionsAsync(string permissionGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionsUpdatePortalPermissionAsync(UpdatePortalPermissionGroupRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalPermissionDto>> PortalPermissionsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionDto> PortalPermissionsInsertAsync(PortalPermissionDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> PortalPermissionsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionDto> PortalPermissionsGetItemAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionsUpdateAsync(string name, PortalPermissionDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionsDeleteAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetPortalPermissionGroupsForPortalPermissionsResponseDto>> PortalPermissionsGetPortalPermissionGroupsForPortalPermissionsAsync(string portalPermissionName, string portalPermissionsName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPortalPermissionGroupsForPortalPermissionsResponseDto> PortalPermissionsGetPortalPermissionGroupsForPortalPermissionsDetailsAsync(string portalPermissionName, string portalPermissionGroupPortalPermissionName, string portalPermissionsName = null, string portalPermissionGroupsPortalPermissionName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPortalPermissionTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalPermissionTypeDto>> PortalPermissionTypesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionTypeDto> PortalPermissionTypesInsertAsync(PortalPermissionTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> PortalPermissionTypesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionTypeDto> PortalPermissionTypesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionTypesUpdateAsync(int id, PortalPermissionTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetPortalPermissionGroupsForPortalPermissionTypesResponseDto>> PortalPermissionTypesGetPortalPermissionGroupsForPortalPermissionTypesAsync(string portalPermissionTypeId, int? portalPermissionTypesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPortalPermissionGroupsForPortalPermissionTypesResponseDto> PortalPermissionTypesGetPortalPermissionGroupsForPortalPermissionTypesDetailsAsync(string portalPermissionTypeId, string portalPermissionGroupPortalPermissionName, int? portalPermissionTypesId = null, string portalPermissionGroupsPortalPermissionName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IRefreshTokensClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<RefreshTokenDto>> RefreshTokensListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RefreshTokenDto> RefreshTokensInsertAsync(RefreshTokenDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> RefreshTokensCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RefreshTokenDto> RefreshTokensGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> RefreshTokensUpdateAsync(int id, RefreshTokenDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> RefreshTokensDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetRefreshTokenResponseDto> RefreshTokensGetRefreshTokenAsync(string refreshTokensToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> RefreshTokensUpdateRefreshTokensAsync(string refreshTokensToken, UpdateRefreshTokensRequestDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITableComboboxSettingsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TableComboboxSettingDto>> TableComboboxSettingsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TableComboboxSettingDto> TableComboboxSettingsInsertAsync(TableComboboxSettingDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> TableComboboxSettingsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TableComboboxSettingDto> TableComboboxSettingsGetItemAsync(string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> TableComboboxSettingsUpdateAsync(string tableName, TableComboboxSettingDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> TableComboboxSettingsDeleteAsync(string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITopicWorkflowsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> TopicWorkflowsGetItemUmlAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> TopicWorkflowsGetItemDiagramAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TopicWorkflowDto>> TopicWorkflowsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TopicWorkflowDto> TopicWorkflowsInsertAsync(TopicWorkflowDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> TopicWorkflowsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TopicWorkflowDto> TopicWorkflowsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> TopicWorkflowsUpdateAsync(int id, TopicWorkflowDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> TopicWorkflowsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetWorkflowsResponseDto>> TopicWorkflowsGetWorkflowsAsync(string topicWorkflowsKafkaEventsTopicName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetWORKFLOWS2ResponseDto>> TopicWorkflowsGetWORKFLOWS2Async(string topicWorkflowsKafkaEventsTopicName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetTopicWorkflowsResponseDto2>> TopicWorkflowsGetTopicWorkflowsAsync(string kafkaEventsTopicName, HttpMethodType apiMethodDefinitionsHttpMethod, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessTokenResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokenType")]
        public string TokenType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessToken")]
        public string AccessToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiresIn")]
        public long ExpiresIn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]
        public string RefreshToken { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AccessTokenResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AccessTokenResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForgotPasswordRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ForgotPasswordRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ForgotPasswordRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InfoRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("newEmail")]
        public string NewEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("newPassword")]
        public string NewPassword { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("oldPassword")]
        public string OldPassword { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InfoRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<InfoRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InfoResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isEmailConfirmed")]
        public bool IsEmailConfirmed { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InfoResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<InfoResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefreshRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]
        public string RefreshToken { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RefreshRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RefreshRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResendConfirmationEmailRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ResendConfirmationEmailRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ResendConfirmationEmailRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResetPasswordRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resetCode")]
        public string ResetCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("newPassword")]
        public string NewPassword { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ResetPasswordRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ResetPasswordRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwoFactorRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("enable")]
        public bool? Enable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorCode")]
        public string TwoFactorCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resetSharedKey")]
        public bool ResetSharedKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resetRecoveryCodes")]
        public bool ResetRecoveryCodes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("forgetMachine")]
        public bool ForgetMachine { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TwoFactorRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TwoFactorRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwoFactorResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("sharedKey")]
        public string SharedKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recoveryCodesLeft")]
        public int RecoveryCodesLeft { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recoveryCodes")]
        public System.Collections.ObjectModel.ObservableCollection<string> RecoveryCodes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isTwoFactorEnabled")]
        public bool IsTwoFactorEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMachineRemembered")]
        public bool IsMachineRemembered { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TwoFactorResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TwoFactorResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginRequest
    {
        /// <summary>
        /// Email address of the user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; } = "demo@quickcode.net";

        /// <summary>
        /// User's password
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string Password { get; set; } = "String1!";

        /// <summary>
        /// Two-factor authentication code, if applicable
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorCode")]
        public string TwoFactorCode { get; set; }

        /// <summary>
        /// Two-factor recovery code, if applicable
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorRecoveryCode")]
        public string TwoFactorRecoveryCode { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static LoginRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<LoginRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomRegisterRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string Password { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CustomRegisterRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<CustomRegisterRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMethodDefinitionDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpMethod")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HttpMethodType HttpMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("controllerName")]
        public string ControllerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("urlPath")]
        public string UrlPath { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMethodDefinitionDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiMethodDefinitionDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApiPermissionGroupsForApiMethodDefinitionsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionKey")]
        public string ApiMethodDefinitionKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetApiPermissionGroupsForApiMethodDefinitionsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetApiPermissionGroupsForApiMethodDefinitionsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetKafkaEventsForApiMethodDefinitionsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("topicName")]
        public string TopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionKey")]
        public string ApiMethodDefinitionKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetKafkaEventsForApiMethodDefinitionsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetKafkaEventsForApiMethodDefinitionsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPermissionGroupDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionKey")]
        public string ApiMethodDefinitionKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPermissionGroupDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiPermissionGroupDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApiPermissionGroupNamesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionKey")]
        public string ApiMethodDefinitionKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetApiPermissionGroupNamesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetApiPermissionGroupNamesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetRoleDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedName")]
        public string NormalizedName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("concurrencyStamp")]
        public string ConcurrencyStamp { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetRoleDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetRoleDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAspNetRoleClaimsForAspNetRolesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimType")]
        public string ClaimType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimValue")]
        public string ClaimValue { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetAspNetRoleClaimsForAspNetRolesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetAspNetRoleClaimsForAspNetRolesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAspNetUserRolesForAspNetRolesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetAspNetUserRolesForAspNetRolesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetAspNetUserRolesForAspNetRolesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetRoleClaimDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimType")]
        public string ClaimType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimValue")]
        public string ClaimValue { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetRoleClaimDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetRoleClaimDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUserDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        public string UserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedUserName")]
        public string NormalizedUserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedEmail")]
        public string NormalizedEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailConfirmed")]
        public bool EmailConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("passwordHash")]
        public string PasswordHash { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("securityStamp")]
        public string SecurityStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("concurrencyStamp")]
        public string ConcurrencyStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberConfirmed")]
        public bool PhoneNumberConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorEnabled")]
        public bool TwoFactorEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnd")]
        public System.DateTime? LockoutEnd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnabled")]
        public bool LockoutEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessFailedCount")]
        public int AccessFailedCount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUserDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUserDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAspNetUserClaimsForAspNetUsersResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimType")]
        public string ClaimType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimValue")]
        public string ClaimValue { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetAspNetUserClaimsForAspNetUsersResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetAspNetUserClaimsForAspNetUsersResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAspNetUserLoginsForAspNetUsersResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("loginProvider")]
        public string LoginProvider { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerKey")]
        public string ProviderKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerDisplayName")]
        public string ProviderDisplayName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetAspNetUserLoginsForAspNetUsersResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetAspNetUserLoginsForAspNetUsersResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAspNetUserRolesForAspNetUsersResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetAspNetUserRolesForAspNetUsersResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetAspNetUserRolesForAspNetUsersResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAspNetUserTokensForAspNetUsersResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loginProvider")]
        public string LoginProvider { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetAspNetUserTokensForAspNetUsersResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetAspNetUserTokensForAspNetUsersResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRefreshTokensForAspNetUsersResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTime ExpiryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isRevoked")]
        public bool IsRevoked { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetRefreshTokensForAspNetUsersResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetRefreshTokensForAspNetUsersResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUserResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        public string UserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedUserName")]
        public string NormalizedUserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedEmail")]
        public string NormalizedEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailConfirmed")]
        public bool EmailConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("passwordHash")]
        public string PasswordHash { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("securityStamp")]
        public string SecurityStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("concurrencyStamp")]
        public string ConcurrencyStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberConfirmed")]
        public bool PhoneNumberConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorEnabled")]
        public bool TwoFactorEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnd")]
        public System.DateTime? LockoutEnd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnabled")]
        public bool LockoutEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessFailedCount")]
        public int AccessFailedCount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetUserResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetUserResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUserClaimDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimType")]
        public string ClaimType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimValue")]
        public string ClaimValue { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUserClaimDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUserClaimDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUserLoginDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("loginProvider")]
        public string LoginProvider { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerKey")]
        public string ProviderKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerDisplayName")]
        public string ProviderDisplayName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUserLoginDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUserLoginDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUserRoleDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUserRoleDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUserRoleDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUserTokenDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loginProvider")]
        public string LoginProvider { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUserTokenDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUserTokenDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ColumnTypeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeName")]
        public string TypeName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iosComponentName")]
        public string IosComponentName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iosType")]
        public string IosType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iconCode")]
        public string IconCode { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ColumnTypeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ColumnTypeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetActiveKafkaEventsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("topicName")]
        public string TopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionKey")]
        public string ApiMethodDefinitionKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpMethod")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HttpMethodType HttpMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("controllerName")]
        public string ControllerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("urlPath")]
        public string UrlPath { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetActiveKafkaEventsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetActiveKafkaEventsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetKafkaEventsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("topicName")]
        public string TopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionKey")]
        public string ApiMethodDefinitionKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpMethod")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HttpMethodType HttpMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("controllerName")]
        public string ControllerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("urlPath")]
        public string UrlPath { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetKafkaEventsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetKafkaEventsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTopicWorkflowsForKafkaEventsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventsTopicName")]
        public string KafkaEventsTopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetTopicWorkflowsForKafkaEventsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetTopicWorkflowsForKafkaEventsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTopicWorkflowsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventsTopicName")]
        public string KafkaEventsTopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetTopicWorkflowsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetTopicWorkflowsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KafkaEventDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("topicName")]
        public string TopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionKey")]
        public string ApiMethodDefinitionKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static KafkaEventDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<KafkaEventDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApiPermissionGroupsForPermissionGroupsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionKey")]
        public string ApiMethodDefinitionKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetApiPermissionGroupsForPermissionGroupsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetApiPermissionGroupsForPermissionGroupsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAspNetUsersForPermissionGroupsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        public string UserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedUserName")]
        public string NormalizedUserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedEmail")]
        public string NormalizedEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailConfirmed")]
        public bool EmailConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("passwordHash")]
        public string PasswordHash { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("securityStamp")]
        public string SecurityStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("concurrencyStamp")]
        public string ConcurrencyStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberConfirmed")]
        public bool PhoneNumberConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorEnabled")]
        public bool TwoFactorEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnd")]
        public System.DateTime? LockoutEnd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnabled")]
        public bool LockoutEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessFailedCount")]
        public int AccessFailedCount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetAspNetUsersForPermissionGroupsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetAspNetUsersForPermissionGroupsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPortalPermissionGroupsForPermissionGroupsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionName")]
        public string PortalPermissionName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetPortalPermissionGroupsForPermissionGroupsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetPortalPermissionGroupsForPermissionGroupsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionGroupDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PermissionGroupDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PermissionGroupDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalMenuDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        public string Text { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tooltip")]
        public string Tooltip { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("actionName")]
        public string ActionName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderNo")]
        public int OrderNo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentName")]
        public string ParentName { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalMenuDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalMenuDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPortalPermissionGroupsForPortalPermissionsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionName")]
        public string PortalPermissionName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetPortalPermissionGroupsForPortalPermissionsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetPortalPermissionGroupsForPortalPermissionsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPortalPermissionGroupResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionName")]
        public string PortalPermissionName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetPortalPermissionGroupResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetPortalPermissionGroupResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPortalPermissionGroupsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionName")]
        public string PortalPermissionName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetPortalPermissionGroupsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetPortalPermissionGroupsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionGroupDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionName")]
        public string PortalPermissionName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionGroupDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionGroupDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPortalPermissionGroupsForPortalPermissionTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionName")]
        public string PortalPermissionName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetPortalPermissionGroupsForPortalPermissionTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetPortalPermissionGroupsForPortalPermissionTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionTypeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionTypeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionTypeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRefreshTokenResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTime ExpiryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isRevoked")]
        public bool IsRevoked { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetRefreshTokenResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetRefreshTokenResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefreshTokenDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTime ExpiryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isRevoked")]
        public bool IsRevoked { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RefreshTokenDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RefreshTokenDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateRefreshTokensRequestDto
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UpdateRefreshTokensRequestDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<UpdateRefreshTokensRequestDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TableComboboxSettingDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("tableName")]
        public string TableName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("idColumn")]
        public string IdColumn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("textColumns")]
        public string TextColumns { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stringFormat")]
        public string StringFormat { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TableComboboxSettingDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TableComboboxSettingDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTopicWorkflowsResponseDto2
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventsTopicName")]
        public string KafkaEventsTopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetTopicWorkflowsResponseDto2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetTopicWorkflowsResponseDto2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWORKFLOWS2ResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventsTopicName")]
        public string KafkaEventsTopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetWORKFLOWS2ResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetWORKFLOWS2ResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWorkflowsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventsTopicName")]
        public string KafkaEventsTopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetWorkflowsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetWorkflowsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopicWorkflowDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventsTopicName")]
        public string KafkaEventsTopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TopicWorkflowDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TopicWorkflowDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMethodDefinitionItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpMethod")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HttpMethodType HttpMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("controllerName")]
        public string ControllerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("urlPath")]
        public string UrlPath { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public bool Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMethodDefinitionItem FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiMethodDefinitionItem>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiModulePermissions
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiModulePermissionList")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<ApiMethodDefinitionItem>>> ApiModulePermissionList { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiModulePermissions FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiModulePermissions>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionGroupList
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissions")]
        public System.Collections.ObjectModel.ObservableCollection<PortalPermissionItem> PortalPermissions { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionGroupList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionGroupList>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionName")]
        public string PortalPermissionName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypes")]
        public System.Collections.ObjectModel.ObservableCollection<PortalPermissionTypeItem> PortalPermissionTypes { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionItem FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionItem>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionTypeItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public bool Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionTypeItem FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionTypeItem>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateApiPermissionGroupRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionKey")]
        public string ApiMethodDefinitionKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public int Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UpdateApiPermissionGroupRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<UpdateApiPermissionGroupRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdatePortalPermissionGroupRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupName")]
        public string PermissionGroupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionName")]
        public string PortalPermissionName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public int Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UpdatePortalPermissionGroupRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<UpdatePortalPermissionGroupRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HttpMethodType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Get")]
        Get = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Post")]
        Post = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Put")]
        Put = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Patch")]
        Patch = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }



}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625