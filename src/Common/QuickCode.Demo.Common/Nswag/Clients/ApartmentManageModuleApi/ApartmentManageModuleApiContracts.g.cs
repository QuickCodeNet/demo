//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace QuickCode.Demo.Common.Nswag.Clients.ApartmentManageModuleApi.Contracts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IApartmentFeePlansClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ApartmentFeePlanDto>> ApartmentFeePlansListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApartmentFeePlanDto> ApartmentFeePlansInsertAsync(ApartmentFeePlanDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> ApartmentFeePlansCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApartmentFeePlanDto> ApartmentFeePlansGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApartmentFeePlansUpdateAsync(int id, ApartmentFeePlanDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApartmentFeePlansDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFeePlanByYearMonthResponseDto>> ApartmentFeePlansGetFeePlanByYearMonthAsync(int apartmentFeePlansSiteId, int apartmentFeePlansApartmentId, int apartmentFeePlansYearId, int apartmentFeePlansMonthId, bool apartmentFeePlansIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFeePlansBySiteResponseDto>> ApartmentFeePlansGetFeePlansBySiteAsync(int apartmentFeePlansSiteId, bool apartmentFeePlansIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatPaymentsForApartmentFeePlansResponseDto>> ApartmentFeePlansGetFlatPaymentsForApartmentFeePlansAsync(string apartmentFeePlanId, int? apartmentFeePlansId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatPaymentsForApartmentFeePlansResponseDto> ApartmentFeePlansGetFlatPaymentsForApartmentFeePlansDetailsAsync(string apartmentFeePlanId, string flatPaymentId, int? apartmentFeePlansId = null, int? flatPaymentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IApartmentsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ApartmentDto>> ApartmentsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApartmentDto> ApartmentsInsertAsync(ApartmentDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> ApartmentsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApartmentDto> ApartmentsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApartmentsUpdateAsync(int id, ApartmentDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApartmentsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetApartmentsBySiteResponseDto>> ApartmentsGetApartmentsBySiteAsync(int apartmentsSiteId, bool apartmentsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetActiveApartmentsResponseDto>> ApartmentsGetActiveApartmentsAsync(bool apartmentsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatsForApartmentsResponseDto>> ApartmentsGetFlatsForApartmentsAsync(string apartmentId, int? apartmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatsForApartmentsResponseDto> ApartmentsGetFlatsForApartmentsDetailsAsync(string apartmentId, string flatId, int? apartmentsId = null, int? flatsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatPaymentsForApartmentsResponseDto>> ApartmentsGetFlatPaymentsForApartmentsAsync(string apartmentId, int? apartmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatPaymentsForApartmentsResponseDto> ApartmentsGetFlatPaymentsForApartmentsDetailsAsync(string apartmentId, string flatPaymentId, int? apartmentsId = null, int? flatPaymentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetCommonExpensesForApartmentsResponseDto>> ApartmentsGetCommonExpensesForApartmentsAsync(string apartmentId, int? apartmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCommonExpensesForApartmentsResponseDto> ApartmentsGetCommonExpensesForApartmentsDetailsAsync(string apartmentId, string commonExpenseId, int? apartmentsId = null, int? commonExpensesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetApartmentFeePlansForApartmentsResponseDto>> ApartmentsGetApartmentFeePlansForApartmentsAsync(string apartmentId, int? apartmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetApartmentFeePlansForApartmentsResponseDto> ApartmentsGetApartmentFeePlansForApartmentsDetailsAsync(string apartmentId, string apartmentFeePlanId, int? apartmentsId = null, int? apartmentFeePlansId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetExpenseInstallmentsForApartmentsResponseDto>> ApartmentsGetExpenseInstallmentsForApartmentsAsync(string apartmentId, int? apartmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetExpenseInstallmentsForApartmentsResponseDto> ApartmentsGetExpenseInstallmentsForApartmentsDetailsAsync(string apartmentId, string expenseInstallmentId, int? apartmentsId = null, int? expenseInstallmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatExpenseInstallmentsForApartmentsResponseDto>> ApartmentsGetFlatExpenseInstallmentsForApartmentsAsync(string apartmentId, int? apartmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatExpenseInstallmentsForApartmentsResponseDto> ApartmentsGetFlatExpenseInstallmentsForApartmentsDetailsAsync(string apartmentId, string flatExpenseInstallmentId, int? apartmentsId = null, int? flatExpenseInstallmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICommonExpensesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CommonExpenseDto>> CommonExpensesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CommonExpenseDto> CommonExpensesInsertAsync(CommonExpenseDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CommonExpensesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CommonExpenseDto> CommonExpensesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CommonExpensesUpdateAsync(int id, CommonExpenseDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CommonExpensesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetExpensesByApartmentMonthResponseDto>> CommonExpensesGetExpensesByApartmentMonthAsync(int commonExpensesSiteId, int commonExpensesApartmentId, int commonExpensesYearId, int commonExpensesMonthId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetExpensesBySiteResponseDto>> CommonExpensesGetExpensesBySiteAsync(int commonExpensesSiteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetExpensesSummaryByYearResponseDto>> CommonExpensesGetExpensesSummaryByYearAsync(int commonExpensesSiteId, int commonExpensesApartmentId, int commonExpensesYearId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetExpensesByTypeResponseDto>> CommonExpensesGetExpensesByTypeAsync(int commonExpensesSiteId, int commonExpensesApartmentId, int commonExpensesExpenseTypeId, int commonExpensesYearId, int commonExpensesMonthId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetUnpaidExpensesByApartmentResponseDto>> CommonExpensesGetUnpaidExpensesByApartmentAsync(int commonExpensesApartmentId, bool commonExpensesPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CommonExpensesGetExpensesCountByApartmentAsync(int commonExpensesApartmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTotalExpenseAmountByApartmentResponseDto> CommonExpensesGetTotalExpenseAmountByApartmentAsync(int commonExpensesApartmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatPaymentsForCommonExpensesResponseDto>> CommonExpensesGetFlatPaymentsForCommonExpensesAsync(string commonExpenseId, int? commonExpensesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatPaymentsForCommonExpensesResponseDto> CommonExpensesGetFlatPaymentsForCommonExpensesDetailsAsync(string commonExpenseId, string flatPaymentId, int? commonExpensesId = null, int? flatPaymentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetExpenseInstallmentsForCommonExpensesResponseDto>> CommonExpensesGetExpenseInstallmentsForCommonExpensesAsync(string commonExpenseId, int? commonExpensesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetExpenseInstallmentsForCommonExpensesResponseDto> CommonExpensesGetExpenseInstallmentsForCommonExpensesDetailsAsync(string commonExpenseId, string expenseInstallmentId, int? commonExpensesId = null, int? expenseInstallmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatExpenseInstallmentsForCommonExpensesResponseDto>> CommonExpensesGetFlatExpenseInstallmentsForCommonExpensesAsync(string commonExpenseId, int? commonExpensesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatExpenseInstallmentsForCommonExpensesResponseDto> CommonExpensesGetFlatExpenseInstallmentsForCommonExpensesDetailsAsync(string commonExpenseId, string flatExpenseInstallmentId, int? commonExpensesId = null, int? flatExpenseInstallmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CommonExpensesMarkExpenseAsPaidAsync(int commonExpensesId, MarkExpenseAsPaidRequestDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IContactsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ContactDto>> ContactsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactDto> ContactsInsertAsync(ContactDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> ContactsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactDto> ContactsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ContactsUpdateAsync(int id, ContactDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ContactsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetActiveContactsResponseDto>> ContactsGetActiveContactsAsync(bool contactsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetContactByIdResponseDto> ContactsGetContactByIdAsync(int contactsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetContactByPhoneResponseDto> ContactsGetContactByPhoneAsync(string contactsPhone, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetContactByEmailResponseDto> ContactsGetContactByEmailAsync(string contactsEmail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetContactByIdentityResponseDto> ContactsGetContactByIdentityAsync(string contactsIdentityNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ContactsCheckContactByPhoneAsync(string contactsPhone, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ContactsCheckContactByEmailAsync(string contactsEmail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> ContactsGetActiveContactsCountAsync(bool contactsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetContactsWithPagerResponseDto>> ContactsGetContactsWithPagerAsync(bool contactsIsActive, int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatContactsForContactsResponseDto>> ContactsGetFlatContactsForContactsAsync(string contactId, int? contactsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatContactsForContactsResponseDto> ContactsGetFlatContactsForContactsDetailsAsync(string contactId, string flatContactId, int? contactsId = null, int? flatContactsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetSiteManagersForContactsResponseDto>> ContactsGetSiteManagersForContactsAsync(string contactId, int? contactsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSiteManagersForContactsResponseDto> ContactsGetSiteManagersForContactsDetailsAsync(string contactId, string siteManagerId, int? contactsId = null, int? siteManagersId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IErrorClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErrorHandleErrorAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IExpenseInstallmentsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ExpenseInstallmentDto>> ExpenseInstallmentsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExpenseInstallmentDto> ExpenseInstallmentsInsertAsync(ExpenseInstallmentDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> ExpenseInstallmentsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExpenseInstallmentDto> ExpenseInstallmentsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ExpenseInstallmentsUpdateAsync(int id, ExpenseInstallmentDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ExpenseInstallmentsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetExpenseInstallmentsResponseDto>> ExpenseInstallmentsGetExpenseInstallmentsAsync(int expenseInstallmentsExpenseId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetUnpaidInstallmentsResponseDto>> ExpenseInstallmentsGetUnpaidInstallmentsAsync(int expenseInstallmentsExpenseId, bool expenseInstallmentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetOverdueInstallmentsResponseDto>> ExpenseInstallmentsGetOverdueInstallmentsAsync(bool expenseInstallmentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetApartmentInstallmentsResponseDto>> ExpenseInstallmentsGetApartmentInstallmentsAsync(int expenseInstallmentsSiteId, int expenseInstallmentsApartmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetSiteInstallmentsResponseDto>> ExpenseInstallmentsGetSiteInstallmentsAsync(int expenseInstallmentsSiteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatExpenseInstallmentsForExpenseInstallmentsResponseDto>> ExpenseInstallmentsGetFlatExpenseInstallmentsForExpenseInstallmentsAsync(string expenseInstallmentId, int? expenseInstallmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatExpenseInstallmentsForExpenseInstallmentsResponseDto> ExpenseInstallmentsGetFlatExpenseInstallmentsForExpenseInstallmentsDetailsAsync(string expenseInstallmentId, string flatExpenseInstallmentId, int? expenseInstallmentsId = null, int? flatExpenseInstallmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> ExpenseInstallmentsMarkInstallmentAsPaidAsync(int expenseInstallmentsId, MarkInstallmentAsPaidRequestDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IExpenseTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ExpenseTypeDto>> ExpenseTypesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExpenseTypeDto> ExpenseTypesInsertAsync(ExpenseTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> ExpenseTypesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExpenseTypeDto> ExpenseTypesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ExpenseTypesUpdateAsync(int id, ExpenseTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ExpenseTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetActiveExpenseTypesResponseDto>> ExpenseTypesGetActiveExpenseTypesAsync(bool expenseTypesIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetCommonExpensesForExpenseTypesResponseDto>> ExpenseTypesGetCommonExpensesForExpenseTypesAsync(string expenseTypeId, int? expenseTypesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCommonExpensesForExpenseTypesResponseDto> ExpenseTypesGetCommonExpensesForExpenseTypesDetailsAsync(string expenseTypeId, string commonExpenseId, int? expenseTypesId = null, int? commonExpensesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFeeTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FeeTypeDto>> FeeTypesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FeeTypeDto> FeeTypesInsertAsync(FeeTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> FeeTypesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FeeTypeDto> FeeTypesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FeeTypesUpdateAsync(int id, FeeTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FeeTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetActiveFeeTypesResponseDto>> FeeTypesGetActiveFeeTypesAsync(bool feeTypesIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatPaymentsForFeeTypesResponseDto>> FeeTypesGetFlatPaymentsForFeeTypesAsync(string feeTypeId, int? feeTypesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatPaymentsForFeeTypesResponseDto> FeeTypesGetFlatPaymentsForFeeTypesDetailsAsync(string feeTypeId, string flatPaymentId, int? feeTypesId = null, int? flatPaymentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFlatContactsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FlatContactDto>> FlatContactsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FlatContactDto> FlatContactsInsertAsync(FlatContactDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> FlatContactsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FlatContactDto> FlatContactsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FlatContactsUpdateAsync(int id, FlatContactDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FlatContactsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatOwnersResponseDto>> FlatContactsGetFlatOwnersAsync(int flatContactsFlatId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatTenantsResponseDto>> FlatContactsGetFlatTenantsAsync(int flatContactsFlatId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetContactFlatsResponseDto>> FlatContactsGetContactFlatsAsync(int flatContactsContactId, bool flatContactsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetContactOwnedFlatsResponseDto>> FlatContactsGetContactOwnedFlatsAsync(int flatContactsContactId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetContactRentedFlatsResponseDto>> FlatContactsGetContactRentedFlatsAsync(int flatContactsContactId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FlatContactsCheckFlatHasOwnerAsync(int flatContactsFlatId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FlatContactsCheckFlatHasTenantAsync(int flatContactsFlatId, RelationshipType flatContactsRelationshipType, bool flatContactsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> FlatContactsGetFlatContactsCountAsync(int flatContactsFlatId, bool flatContactsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFlatExpenseInstallmentsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FlatExpenseInstallmentDto>> FlatExpenseInstallmentsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FlatExpenseInstallmentDto> FlatExpenseInstallmentsInsertAsync(FlatExpenseInstallmentDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> FlatExpenseInstallmentsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FlatExpenseInstallmentDto> FlatExpenseInstallmentsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FlatExpenseInstallmentsUpdateAsync(int id, FlatExpenseInstallmentDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FlatExpenseInstallmentsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatExpenseInstallmentsResponseDto>> FlatExpenseInstallmentsGetFlatExpenseInstallmentsAsync(int flatExpenseInstallmentsFlatId, int flatExpenseInstallmentsExpenseId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatUnpaidInstallmentsResponseDto>> FlatExpenseInstallmentsGetFlatUnpaidInstallmentsAsync(int flatExpenseInstallmentsFlatId, bool flatExpenseInstallmentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatOverdueInstallmentsResponseDto>> FlatExpenseInstallmentsGetFlatOverdueInstallmentsAsync(int flatExpenseInstallmentsFlatId, bool flatExpenseInstallmentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetApartmentFlatInstallmentsResponseDto>> FlatExpenseInstallmentsGetApartmentFlatInstallmentsAsync(int flatExpenseInstallmentsSiteId, int flatExpenseInstallmentsApartmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatTotalDebtResponseDto>> FlatExpenseInstallmentsGetFlatTotalDebtAsync(int flatExpenseInstallmentsFlatId, bool flatExpenseInstallmentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> FlatExpenseInstallmentsMarkFlatInstallmentAsPaidAsync(int flatExpenseInstallmentsId, MarkFlatInstallmentAsPaidRequestDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFlatPaymentsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FlatPaymentDto>> FlatPaymentsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FlatPaymentDto> FlatPaymentsInsertAsync(FlatPaymentDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> FlatPaymentsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FlatPaymentDto> FlatPaymentsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FlatPaymentsUpdateAsync(int id, FlatPaymentDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FlatPaymentsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetPaymentsByFlatYearMonthResponseDto>> FlatPaymentsGetPaymentsByFlatYearMonthAsync(int flatPaymentsSiteId, int flatPaymentsFlatId, int flatPaymentsYearId, int flatPaymentsMonthId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetUnpaidPaymentsByFlatResponseDto>> FlatPaymentsGetUnpaidPaymentsByFlatAsync(int flatPaymentsSiteId, int flatPaymentsFlatId, bool flatPaymentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetUnpaidPaymentsBySiteResponseDto>> FlatPaymentsGetUnpaidPaymentsBySiteAsync(int flatPaymentsSiteId, bool flatPaymentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetTotalCashInSafeResponseDto>> FlatPaymentsGetTotalCashInSafeAsync(int flatPaymentsSiteId, bool flatPaymentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetPendingPaymentsByFlatYearMonthResponseDto>> FlatPaymentsGetPendingPaymentsByFlatYearMonthAsync(int flatPaymentsSiteId, bool flatPaymentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatPaymentsByMonthResponseDto>> FlatPaymentsGetFlatPaymentsByMonthAsync(int flatPaymentsFlatId, int flatPaymentsYearId, int flatPaymentsMonthId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> FlatPaymentsGetPaymentsCountByFlatAsync(int flatPaymentsFlatId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTotalPaidAmountByFlatResponseDto> FlatPaymentsGetTotalPaidAmountByFlatAsync(int flatPaymentsFlatId, bool flatPaymentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> FlatPaymentsGetUnpaidPaymentsCountBySiteAsync(int flatPaymentsSiteId, bool flatPaymentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> FlatPaymentsMarkPaymentAsPaidAsync(int flatPaymentsId, MarkPaymentAsPaidRequestDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFlatsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FlatDto>> FlatsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FlatDto> FlatsInsertAsync(FlatDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> FlatsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FlatDto> FlatsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FlatsUpdateAsync(int id, FlatDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> FlatsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatsByApartmentResponseDto>> FlatsGetFlatsByApartmentAsync(int flatsApartmentId, bool flatsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatsBySiteResponseDto>> FlatsGetFlatsBySiteAsync(int flatsSiteId, bool flatsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatsWithContactsResponseDto>> FlatsGetFlatsWithContactsAsync(int flatsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetVacantFlatsResponseDto>> FlatsGetVacantFlatsAsync(bool flatsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetRentedFlatsResponseDto>> FlatsGetRentedFlatsAsync(bool flatsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatByNumberResponseDto> FlatsGetFlatByNumberAsync(int flatsSiteId, string flatsFlatNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetOwnedFlatsResponseDto>> FlatsGetOwnedFlatsAsync(bool flatsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> FlatsGetFlatsCountBySiteAsync(int flatsSiteId, bool flatsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> FlatsGetFlatsCountByApartmentAsync(int flatsApartmentId, bool flatsIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatContactsForFlatsResponseDto>> FlatsGetFlatContactsForFlatsAsync(string flatId, int? flatsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatContactsForFlatsResponseDto> FlatsGetFlatContactsForFlatsDetailsAsync(string flatId, string flatContactId, int? flatsId = null, int? flatContactsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatPaymentsForFlatsResponseDto>> FlatsGetFlatPaymentsForFlatsAsync(string flatId, int? flatsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatPaymentsForFlatsResponseDto> FlatsGetFlatPaymentsForFlatsDetailsAsync(string flatId, string flatPaymentId, int? flatsId = null, int? flatPaymentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatExpenseInstallmentsForFlatsResponseDto>> FlatsGetFlatExpenseInstallmentsForFlatsAsync(string flatId, int? flatsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatExpenseInstallmentsForFlatsResponseDto> FlatsGetFlatExpenseInstallmentsForFlatsDetailsAsync(string flatId, string flatExpenseInstallmentId, int? flatsId = null, int? flatExpenseInstallmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetUserSiteAccessesForFlatsResponseDto>> FlatsGetUserSiteAccessesForFlatsAsync(string flatId, int? flatsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetUserSiteAccessesForFlatsResponseDto> FlatsGetUserSiteAccessesForFlatsDetailsAsync(string flatId, string userSiteAccessId, int? flatsId = null, int? userSiteAccessesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPaymentMonthsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PaymentMonthDto>> PaymentMonthsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentMonthDto> PaymentMonthsInsertAsync(PaymentMonthDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> PaymentMonthsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentMonthDto> PaymentMonthsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PaymentMonthsUpdateAsync(int id, PaymentMonthDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PaymentMonthsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetAllMonthsResponseDto>> PaymentMonthsGetAllMonthsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetApartmentFeePlansForPaymentMonthsResponseDto>> PaymentMonthsGetApartmentFeePlansForPaymentMonthsAsync(string paymentMonthId, int? paymentMonthsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetApartmentFeePlansForPaymentMonthsResponseDto> PaymentMonthsGetApartmentFeePlansForPaymentMonthsDetailsAsync(string paymentMonthId, string apartmentFeePlanId, int? paymentMonthsId = null, int? apartmentFeePlansId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatPaymentsForPaymentMonthsResponseDto>> PaymentMonthsGetFlatPaymentsForPaymentMonthsAsync(string paymentMonthId, int? paymentMonthsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatPaymentsForPaymentMonthsResponseDto> PaymentMonthsGetFlatPaymentsForPaymentMonthsDetailsAsync(string paymentMonthId, string flatPaymentId, int? paymentMonthsId = null, int? flatPaymentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetCommonExpensesForPaymentMonthsResponseDto>> PaymentMonthsGetCommonExpensesForPaymentMonthsAsync(string paymentMonthId, int? paymentMonthsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCommonExpensesForPaymentMonthsResponseDto> PaymentMonthsGetCommonExpensesForPaymentMonthsDetailsAsync(string paymentMonthId, string commonExpenseId, int? paymentMonthsId = null, int? commonExpensesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPaymentTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PaymentTypeDto>> PaymentTypesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentTypeDto> PaymentTypesInsertAsync(PaymentTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> PaymentTypesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentTypeDto> PaymentTypesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PaymentTypesUpdateAsync(int id, PaymentTypeDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PaymentTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetActivePaymentTypesResponseDto>> PaymentTypesGetActivePaymentTypesAsync(bool paymentTypesIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatPaymentsForPaymentTypesResponseDto>> PaymentTypesGetFlatPaymentsForPaymentTypesAsync(string paymentTypeId, int? paymentTypesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatPaymentsForPaymentTypesResponseDto> PaymentTypesGetFlatPaymentsForPaymentTypesDetailsAsync(string paymentTypeId, string flatPaymentId, int? paymentTypesId = null, int? flatPaymentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetCommonExpensesForPaymentTypesResponseDto>> PaymentTypesGetCommonExpensesForPaymentTypesAsync(string paymentTypeId, int? paymentTypesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCommonExpensesForPaymentTypesResponseDto> PaymentTypesGetCommonExpensesForPaymentTypesDetailsAsync(string paymentTypeId, string commonExpenseId, int? paymentTypesId = null, int? commonExpensesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetExpenseInstallmentsForPaymentTypesResponseDto>> PaymentTypesGetExpenseInstallmentsForPaymentTypesAsync(string paymentTypeId, int? paymentTypesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetExpenseInstallmentsForPaymentTypesResponseDto> PaymentTypesGetExpenseInstallmentsForPaymentTypesDetailsAsync(string paymentTypeId, string expenseInstallmentId, int? paymentTypesId = null, int? expenseInstallmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatExpenseInstallmentsForPaymentTypesResponseDto>> PaymentTypesGetFlatExpenseInstallmentsForPaymentTypesAsync(string paymentTypeId, int? paymentTypesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatExpenseInstallmentsForPaymentTypesResponseDto> PaymentTypesGetFlatExpenseInstallmentsForPaymentTypesDetailsAsync(string paymentTypeId, string flatExpenseInstallmentId, int? paymentTypesId = null, int? flatExpenseInstallmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPaymentYearsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PaymentYearDto>> PaymentYearsListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentYearDto> PaymentYearsInsertAsync(PaymentYearDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> PaymentYearsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentYearDto> PaymentYearsGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PaymentYearsUpdateAsync(int id, PaymentYearDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PaymentYearsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetAllYearsResponseDto>> PaymentYearsGetAllYearsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetApartmentFeePlansForPaymentYearsResponseDto>> PaymentYearsGetApartmentFeePlansForPaymentYearsAsync(string paymentYearId, int? paymentYearsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetApartmentFeePlansForPaymentYearsResponseDto> PaymentYearsGetApartmentFeePlansForPaymentYearsDetailsAsync(string paymentYearId, string apartmentFeePlanId, int? paymentYearsId = null, int? apartmentFeePlansId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatPaymentsForPaymentYearsResponseDto>> PaymentYearsGetFlatPaymentsForPaymentYearsAsync(string paymentYearId, int? paymentYearsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatPaymentsForPaymentYearsResponseDto> PaymentYearsGetFlatPaymentsForPaymentYearsDetailsAsync(string paymentYearId, string flatPaymentId, int? paymentYearsId = null, int? flatPaymentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetCommonExpensesForPaymentYearsResponseDto>> PaymentYearsGetCommonExpensesForPaymentYearsAsync(string paymentYearId, int? paymentYearsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCommonExpensesForPaymentYearsResponseDto> PaymentYearsGetCommonExpensesForPaymentYearsDetailsAsync(string paymentYearId, string commonExpenseId, int? paymentYearsId = null, int? commonExpensesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISiteManagersClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SiteManagerDto>> SiteManagersListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SiteManagerDto> SiteManagersInsertAsync(SiteManagerDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> SiteManagersCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SiteManagerDto> SiteManagersGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SiteManagersUpdateAsync(int id, SiteManagerDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SiteManagersDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetSiteManagersResponseDto>> SiteManagersGetSiteManagersAsync(int siteManagersSiteId, bool siteManagersIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetActiveManagerBySiteResponseDto> SiteManagersGetActiveManagerBySiteAsync(int siteManagersSiteId, bool siteManagersIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetSiteManagerWithContactResponseDto>> SiteManagersGetSiteManagerWithContactAsync(int siteManagersContactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SiteManagersCheckSiteHasManagerAsync(int siteManagersSiteId, bool siteManagersIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISitesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SiteDto>> SitesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SiteDto> SitesInsertAsync(SiteDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> SitesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SiteDto> SitesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SitesUpdateAsync(int id, SiteDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SitesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetActiveSitesResponseDto>> SitesGetActiveSitesAsync(bool sitesIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSiteByIdResponseDto> SitesGetSiteByIdAsync(int sitesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> SitesGetFlatsCountBySiteAsync(int sitesId, bool sitesIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> SitesGetOwnersCountBySiteAsync(int sitesId, bool sitesIsActive, RelationshipType flatContactsRelationshipType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> SitesGetTenantsCountBySiteAsync(int sitesId, bool sitesIsActive, RelationshipType flatContactsRelationshipType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTotalPaymentsBySiteResponseDto> SitesGetTotalPaymentsBySiteAsync(int sitesId, bool flatPaymentsPaid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetApartmentsForSitesResponseDto>> SitesGetApartmentsForSitesAsync(string siteId, int? sitesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetApartmentsForSitesResponseDto> SitesGetApartmentsForSitesDetailsAsync(string siteId, string apartmentId, int? sitesId = null, int? apartmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatsForSitesResponseDto>> SitesGetFlatsForSitesAsync(string siteId, int? sitesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatsForSitesResponseDto> SitesGetFlatsForSitesDetailsAsync(string siteId, string flatId, int? sitesId = null, int? flatsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetSiteManagersForSitesResponseDto>> SitesGetSiteManagersForSitesAsync(string siteId, int? sitesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSiteManagersForSitesResponseDto> SitesGetSiteManagersForSitesDetailsAsync(string siteId, string siteManagerId, int? sitesId = null, int? siteManagersId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatPaymentsForSitesResponseDto>> SitesGetFlatPaymentsForSitesAsync(string siteId, int? sitesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatPaymentsForSitesResponseDto> SitesGetFlatPaymentsForSitesDetailsAsync(string siteId, string flatPaymentId, int? sitesId = null, int? flatPaymentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetCommonExpensesForSitesResponseDto>> SitesGetCommonExpensesForSitesAsync(string siteId, int? sitesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCommonExpensesForSitesResponseDto> SitesGetCommonExpensesForSitesDetailsAsync(string siteId, string commonExpenseId, int? sitesId = null, int? commonExpensesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetApartmentFeePlansForSitesResponseDto>> SitesGetApartmentFeePlansForSitesAsync(string siteId, int? sitesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetApartmentFeePlansForSitesResponseDto> SitesGetApartmentFeePlansForSitesDetailsAsync(string siteId, string apartmentFeePlanId, int? sitesId = null, int? apartmentFeePlansId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetExpenseInstallmentsForSitesResponseDto>> SitesGetExpenseInstallmentsForSitesAsync(string siteId, int? sitesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetExpenseInstallmentsForSitesResponseDto> SitesGetExpenseInstallmentsForSitesDetailsAsync(string siteId, string expenseInstallmentId, int? sitesId = null, int? expenseInstallmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetFlatExpenseInstallmentsForSitesResponseDto>> SitesGetFlatExpenseInstallmentsForSitesAsync(string siteId, int? sitesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFlatExpenseInstallmentsForSitesResponseDto> SitesGetFlatExpenseInstallmentsForSitesDetailsAsync(string siteId, string flatExpenseInstallmentId, int? sitesId = null, int? flatExpenseInstallmentsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetUserSiteAccessesForSitesResponseDto>> SitesGetUserSiteAccessesForSitesAsync(string siteId, int? sitesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetUserSiteAccessesForSitesResponseDto> SitesGetUserSiteAccessesForSitesDetailsAsync(string siteId, string userSiteAccessId, int? sitesId = null, int? userSiteAccessesId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IUserSiteAccessesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<UserSiteAccessDto>> UserSiteAccessesListAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSiteAccessDto> UserSiteAccessesInsertAsync(UserSiteAccessDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> UserSiteAccessesCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSiteAccessDto> UserSiteAccessesGetItemAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> UserSiteAccessesUpdateAsync(int id, UserSiteAccessDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> UserSiteAccessesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetUserSitesResponseDto>> UserSiteAccessesGetUserSitesAsync(int userSiteAccessesUserId, bool userSiteAccessesIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetSiteUsersResponseDto>> UserSiteAccessesGetSiteUsersAsync(int userSiteAccessesSiteId, bool userSiteAccessesIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Models.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GetUserFlatsResponseDto>> UserSiteAccessesGetUserFlatsAsync(int userSiteAccessesUserId, bool userSiteAccessesIsActive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApartmentDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlats")]
        public int TotalFlats { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApartmentDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApartmentDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetActiveApartmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetActiveApartmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetActiveApartmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApartmentFeePlansForApartmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeAmount")]
        public double FeeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetApartmentFeePlansForApartmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetApartmentFeePlansForApartmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApartmentsBySiteResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlats")]
        public int TotalFlats { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetApartmentsBySiteResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetApartmentsBySiteResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCommonExpensesForApartmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseTypeId")]
        public int ExpenseTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseAmount")]
        public double ExpenseAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetCommonExpensesForApartmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetCommonExpensesForApartmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetExpenseInstallmentsForApartmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentNumber")]
        public int InstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInstallments")]
        public int TotalInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentAmount")]
        public double InstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetExpenseInstallmentsForApartmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetExpenseInstallmentsForApartmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatExpenseInstallmentsForApartmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseInstallmentId")]
        public int ExpenseInstallmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentNumber")]
        public int FlatInstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlatInstallments")]
        public int TotalFlatInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentAmount")]
        public double FlatInstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatExpenseInstallmentsForApartmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatExpenseInstallmentsForApartmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatPaymentsForApartmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatPaymentsForApartmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatPaymentsForApartmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatsForApartmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]
        public string FlatNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("floor")]
        public int? Floor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("squareMeters")]
        public int? SquareMeters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roomCount")]
        public int? RoomCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatsForApartmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatsForApartmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApartmentFeePlanDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeAmount")]
        public double FeeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApartmentFeePlanDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApartmentFeePlanDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFeePlanByYearMonthResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("feeAmount")]
        public double FeeAmount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFeePlanByYearMonthResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFeePlanByYearMonthResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFeePlansBySiteResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeAmount")]
        public double FeeAmount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFeePlansBySiteResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFeePlansBySiteResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatPaymentsForApartmentFeePlansResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatPaymentsForApartmentFeePlansResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatPaymentsForApartmentFeePlansResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommonExpenseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseTypeId")]
        public int ExpenseTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseAmount")]
        public double ExpenseAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CommonExpenseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<CommonExpenseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetExpenseInstallmentsForCommonExpensesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentNumber")]
        public int InstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInstallments")]
        public int TotalInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentAmount")]
        public double InstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetExpenseInstallmentsForCommonExpensesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetExpenseInstallmentsForCommonExpensesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetExpensesByApartmentMonthResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseTypeId")]
        public int ExpenseTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseAmount")]
        public double ExpenseAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetExpensesByApartmentMonthResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetExpensesByApartmentMonthResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetExpensesBySiteResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseTypeId")]
        public int ExpenseTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseAmount")]
        public double ExpenseAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetExpensesBySiteResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetExpensesBySiteResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetExpensesByTypeResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseAmount")]
        public double ExpenseAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetExpensesByTypeResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetExpensesByTypeResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetExpensesSummaryByYearResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("expenseTypeId")]
        public int ExpenseTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]
        public double TotalAmount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetExpensesSummaryByYearResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetExpensesSummaryByYearResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatExpenseInstallmentsForCommonExpensesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseInstallmentId")]
        public int ExpenseInstallmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentNumber")]
        public int FlatInstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlatInstallments")]
        public int TotalFlatInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentAmount")]
        public double FlatInstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatExpenseInstallmentsForCommonExpensesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatExpenseInstallmentsForCommonExpensesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatPaymentsForCommonExpensesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatPaymentsForCommonExpensesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatPaymentsForCommonExpensesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTotalExpenseAmountByApartmentResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]
        public double TotalAmount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetTotalExpenseAmountByApartmentResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetTotalExpenseAmountByApartmentResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUnpaidExpensesByApartmentResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseAmount")]
        public double ExpenseAmount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetUnpaidExpensesByApartmentResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetUnpaidExpensesByApartmentResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarkExpenseAsPaidRequestDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("commonExpensesPaidAt")]
        public System.DateTime? CommonExpensesPaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("commonExpensesPaymentTypeId")]
        public int CommonExpensesPaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarkExpenseAsPaidRequestDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MarkExpenseAsPaidRequestDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identityNumber")]
        public string IdentityNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ContactDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ContactDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetActiveContactsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetActiveContactsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetActiveContactsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetContactByEmailResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetContactByEmailResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetContactByEmailResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetContactByIdResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identityNumber")]
        public string IdentityNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetContactByIdResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetContactByIdResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetContactByIdentityResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetContactByIdentityResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetContactByIdentityResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetContactByPhoneResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetContactByPhoneResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetContactByPhoneResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetContactsWithPagerResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetContactsWithPagerResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetContactsWithPagerResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatContactsForContactsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public int ContactId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("relationshipType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RelationshipType RelationshipType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatContactsForContactsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatContactsForContactsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSiteManagersForContactsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public int ContactId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetSiteManagersForContactsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetSiteManagersForContactsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpenseInstallmentDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentNumber")]
        public int InstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInstallments")]
        public int TotalInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentAmount")]
        public double InstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ExpenseInstallmentDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ExpenseInstallmentDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApartmentInstallmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentNumber")]
        public int InstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentAmount")]
        public double InstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetApartmentInstallmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetApartmentInstallmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetExpenseInstallmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentNumber")]
        public int InstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInstallments")]
        public int TotalInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentAmount")]
        public double InstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetExpenseInstallmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetExpenseInstallmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatExpenseInstallmentsForExpenseInstallmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseInstallmentId")]
        public int ExpenseInstallmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentNumber")]
        public int FlatInstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlatInstallments")]
        public int TotalFlatInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentAmount")]
        public double FlatInstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatExpenseInstallmentsForExpenseInstallmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatExpenseInstallmentsForExpenseInstallmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOverdueInstallmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentNumber")]
        public int InstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentAmount")]
        public double InstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetOverdueInstallmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetOverdueInstallmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSiteInstallmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentNumber")]
        public int InstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentAmount")]
        public double InstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetSiteInstallmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetSiteInstallmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUnpaidInstallmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentNumber")]
        public int InstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentAmount")]
        public double InstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetUnpaidInstallmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetUnpaidInstallmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarkInstallmentAsPaidRequestDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("expenseInstallmentsPaidAt")]
        public System.DateTime? ExpenseInstallmentsPaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseInstallmentsPaymentTypeId")]
        public int ExpenseInstallmentsPaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarkInstallmentAsPaidRequestDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MarkInstallmentAsPaidRequestDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpenseTypeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ExpenseTypeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ExpenseTypeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetActiveExpenseTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetActiveExpenseTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetActiveExpenseTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCommonExpensesForExpenseTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseTypeId")]
        public int ExpenseTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseAmount")]
        public double ExpenseAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetCommonExpensesForExpenseTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetCommonExpensesForExpenseTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeTypeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FeeTypeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<FeeTypeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetActiveFeeTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetActiveFeeTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetActiveFeeTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatPaymentsForFeeTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatPaymentsForFeeTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatPaymentsForFeeTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]
        public string FlatNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("floor")]
        public int? Floor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("squareMeters")]
        public int? SquareMeters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roomCount")]
        public int? RoomCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FlatDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<FlatDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatByNumberResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("floor")]
        public int? Floor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("squareMeters")]
        public int? SquareMeters { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatByNumberResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatByNumberResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatContactsForFlatsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public int ContactId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("relationshipType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RelationshipType RelationshipType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatContactsForFlatsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatContactsForFlatsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatExpenseInstallmentsForFlatsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseInstallmentId")]
        public int ExpenseInstallmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentNumber")]
        public int FlatInstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlatInstallments")]
        public int TotalFlatInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentAmount")]
        public double FlatInstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatExpenseInstallmentsForFlatsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatExpenseInstallmentsForFlatsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatPaymentsForFlatsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatPaymentsForFlatsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatPaymentsForFlatsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatsByApartmentResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]
        public string FlatNumber { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatsByApartmentResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatsByApartmentResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatsBySiteResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]
        public string FlatNumber { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatsBySiteResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatsBySiteResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatsWithContactsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]
        public string FlatNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactName")]
        public string ContactName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPhone")]
        public string ContactPhone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("relationshipType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RelationshipType RelationshipType { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatsWithContactsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatsWithContactsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOwnedFlatsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]
        public string FlatNumber { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetOwnedFlatsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetOwnedFlatsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRentedFlatsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]
        public string FlatNumber { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetRentedFlatsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetRentedFlatsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUserSiteAccessesForFlatsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public int UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int? FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccessType AccessType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("grantedDate")]
        public System.DateTime GrantedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("grantedBy")]
        public int? GrantedBy { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetUserSiteAccessesForFlatsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetUserSiteAccessesForFlatsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetVacantFlatsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]
        public string FlatNumber { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetVacantFlatsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetVacantFlatsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatContactDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public int ContactId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("relationshipType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RelationshipType RelationshipType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FlatContactDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<FlatContactDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetContactFlatsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("relationshipType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RelationshipType RelationshipType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetContactFlatsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetContactFlatsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetContactOwnedFlatsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetContactOwnedFlatsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetContactOwnedFlatsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetContactRentedFlatsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetContactRentedFlatsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetContactRentedFlatsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatOwnersResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public int ContactId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatOwnersResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatOwnersResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatTenantsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public int ContactId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatTenantsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatTenantsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatExpenseInstallmentDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseInstallmentId")]
        public int ExpenseInstallmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentNumber")]
        public int FlatInstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlatInstallments")]
        public int TotalFlatInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentAmount")]
        public double FlatInstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FlatExpenseInstallmentDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<FlatExpenseInstallmentDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApartmentFlatInstallmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentNumber")]
        public int FlatInstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentAmount")]
        public double FlatInstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetApartmentFlatInstallmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetApartmentFlatInstallmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatExpenseInstallmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentNumber")]
        public int FlatInstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlatInstallments")]
        public int TotalFlatInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentAmount")]
        public double FlatInstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatExpenseInstallmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatExpenseInstallmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatOverdueInstallmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentNumber")]
        public int FlatInstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentAmount")]
        public double FlatInstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatOverdueInstallmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatOverdueInstallmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatTotalDebtResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalDebt")]
        public double TotalDebt { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatTotalDebtResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatTotalDebtResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatUnpaidInstallmentsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentNumber")]
        public int FlatInstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentAmount")]
        public double FlatInstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatUnpaidInstallmentsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatUnpaidInstallmentsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarkFlatInstallmentAsPaidRequestDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("flatExpenseInstallmentsPaidAt")]
        public System.DateTime? FlatExpenseInstallmentsPaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatExpenseInstallmentsPaymentTypeId")]
        public int FlatExpenseInstallmentsPaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarkFlatInstallmentAsPaidRequestDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MarkFlatInstallmentAsPaidRequestDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatPaymentDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FlatPaymentDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<FlatPaymentDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatPaymentsByMonthResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatPaymentsByMonthResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatPaymentsByMonthResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPaymentsByFlatYearMonthResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetPaymentsByFlatYearMonthResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetPaymentsByFlatYearMonthResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPendingPaymentsByFlatYearMonthResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetPendingPaymentsByFlatYearMonthResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetPendingPaymentsByFlatYearMonthResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTotalCashInSafeResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalCash")]
        public double TotalCash { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetTotalCashInSafeResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetTotalCashInSafeResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTotalPaidAmountByFlatResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]
        public double TotalAmount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetTotalPaidAmountByFlatResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetTotalPaidAmountByFlatResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUnpaidPaymentsByFlatResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetUnpaidPaymentsByFlatResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetUnpaidPaymentsByFlatResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUnpaidPaymentsBySiteResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetUnpaidPaymentsBySiteResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetUnpaidPaymentsBySiteResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarkPaymentAsPaidRequestDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("flatPaymentsPaidAt")]
        public System.DateTime? FlatPaymentsPaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatPaymentsPaymentTypeId")]
        public int FlatPaymentsPaymentTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarkPaymentAsPaidRequestDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MarkPaymentAsPaidRequestDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllMonthsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetAllMonthsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetAllMonthsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApartmentFeePlansForPaymentMonthsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeAmount")]
        public double FeeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetApartmentFeePlansForPaymentMonthsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetApartmentFeePlansForPaymentMonthsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCommonExpensesForPaymentMonthsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseTypeId")]
        public int ExpenseTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseAmount")]
        public double ExpenseAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetCommonExpensesForPaymentMonthsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetCommonExpensesForPaymentMonthsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatPaymentsForPaymentMonthsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatPaymentsForPaymentMonthsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatPaymentsForPaymentMonthsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMonthDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PaymentMonthDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PaymentMonthDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetActivePaymentTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetActivePaymentTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetActivePaymentTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCommonExpensesForPaymentTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseTypeId")]
        public int ExpenseTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseAmount")]
        public double ExpenseAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetCommonExpensesForPaymentTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetCommonExpensesForPaymentTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetExpenseInstallmentsForPaymentTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentNumber")]
        public int InstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInstallments")]
        public int TotalInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentAmount")]
        public double InstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetExpenseInstallmentsForPaymentTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetExpenseInstallmentsForPaymentTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatExpenseInstallmentsForPaymentTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseInstallmentId")]
        public int ExpenseInstallmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentNumber")]
        public int FlatInstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlatInstallments")]
        public int TotalFlatInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentAmount")]
        public double FlatInstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatExpenseInstallmentsForPaymentTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatExpenseInstallmentsForPaymentTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatPaymentsForPaymentTypesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatPaymentsForPaymentTypesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatPaymentsForPaymentTypesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentTypeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PaymentTypeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PaymentTypeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllYearsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetAllYearsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetAllYearsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApartmentFeePlansForPaymentYearsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeAmount")]
        public double FeeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetApartmentFeePlansForPaymentYearsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetApartmentFeePlansForPaymentYearsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCommonExpensesForPaymentYearsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseTypeId")]
        public int ExpenseTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseAmount")]
        public double ExpenseAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetCommonExpensesForPaymentYearsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetCommonExpensesForPaymentYearsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatPaymentsForPaymentYearsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatPaymentsForPaymentYearsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatPaymentsForPaymentYearsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentYearDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PaymentYearDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PaymentYearDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetActiveSitesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("district")]
        public string District { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetActiveSitesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetActiveSitesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApartmentFeePlansForSitesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeAmount")]
        public double FeeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetApartmentFeePlansForSitesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetApartmentFeePlansForSitesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApartmentsForSitesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlats")]
        public int TotalFlats { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetApartmentsForSitesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetApartmentsForSitesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCommonExpensesForSitesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseTypeId")]
        public int ExpenseTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseAmount")]
        public double ExpenseAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetCommonExpensesForSitesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetCommonExpensesForSitesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetExpenseInstallmentsForSitesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentNumber")]
        public int InstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInstallments")]
        public int TotalInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("installmentAmount")]
        public double InstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetExpenseInstallmentsForSitesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetExpenseInstallmentsForSitesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatExpenseInstallmentsForSitesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseInstallmentId")]
        public int ExpenseInstallmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentNumber")]
        public int FlatInstallmentNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlatInstallments")]
        public int TotalFlatInstallments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatInstallmentAmount")]
        public double FlatInstallmentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public System.DateTime DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatExpenseInstallmentsForSitesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatExpenseInstallmentsForSitesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatPaymentsForSitesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearId")]
        public int YearId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthId")]
        public int MonthId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        public double PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTypeId")]
        public int FeeTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feePlanId")]
        public int FeePlanId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public int? ExpenseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paidAt")]
        public System.DateTime? PaidAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeId")]
        public int PaymentTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatPaymentsForSitesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatPaymentsForSitesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFlatsForSitesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartmentId")]
        public int ApartmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]
        public string FlatNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("floor")]
        public int? Floor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("squareMeters")]
        public int? SquareMeters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roomCount")]
        public int? RoomCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetFlatsForSitesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetFlatsForSitesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSiteByIdResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("district")]
        public string District { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetSiteByIdResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetSiteByIdResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSiteManagersForSitesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public int ContactId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetSiteManagersForSitesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetSiteManagersForSitesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTotalPaymentsBySiteResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalPayments")]
        public double TotalPayments { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetTotalPaymentsBySiteResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetTotalPaymentsBySiteResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUserSiteAccessesForSitesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public int UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int? FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccessType AccessType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("grantedDate")]
        public System.DateTime GrantedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("grantedBy")]
        public int? GrantedBy { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetUserSiteAccessesForSitesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetUserSiteAccessesForSitesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiteDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("district")]
        public string District { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SiteDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<SiteDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetActiveManagerBySiteResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public int ContactId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetActiveManagerBySiteResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetActiveManagerBySiteResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSiteManagerWithContactResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetSiteManagerWithContactResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetSiteManagerWithContactResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSiteManagersResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public int ContactId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetSiteManagersResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetSiteManagersResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SiteManagerDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public int ContactId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SiteManagerDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<SiteManagerDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSiteUsersResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public int UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccessType AccessType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int? FlatId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetSiteUsersResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetSiteUsersResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUserFlatsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int? FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccessType AccessType { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetUserFlatsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetUserFlatsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUserSitesResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccessType AccessType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int? FlatId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetUserSitesResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<GetUserSitesResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSiteAccessDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public int UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public int SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flatId")]
        public int? FlatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccessType AccessType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("grantedDate")]
        public System.DateTime GrantedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("grantedBy")]
        public int? GrantedBy { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserSiteAccessDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<UserSiteAccessDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccessType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Owner")]
        Owner = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tenant")]
        Tenant = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Manager")]
        Manager = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Admin")]
        Admin = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Viewer")]
        Viewer = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RelationshipType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Owner")]
        Owner = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tenant")]
        Tenant = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FamilyMember")]
        FamilyMember = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 3,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625