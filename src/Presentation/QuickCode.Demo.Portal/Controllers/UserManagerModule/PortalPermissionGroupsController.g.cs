//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using QuickCode.Demo.Portal.Models;
using QuickCode.Demo.Portal.Models.UserManagerModule;
using QuickCode.Demo.Portal.Helpers;
using Microsoft.AspNetCore.Mvc;
using UserManagerModuleContracts = QuickCode.Demo.Common.Nswag.Clients.UserManagerModuleApi.Contracts;
using System.IO;
using Microsoft.AspNetCore.Authorization;
using QuickCode.Demo.Portal.Helpers.Authorization;
using Microsoft.AspNetCore.Http;
using System.Threading;
using System.Threading.Tasks;
using AutoRest.Core.Utilities.Collections;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace QuickCode.Demo.Portal.Controllers.UserManagerModule
{
    [Permission("UserManagerModulePortalPermissionGroups")]
    [Area("UserManagerModule")]
    [Route("UserManagerModulePortalPermissionGroups")]
    public partial class PortalPermissionGroupsController : BaseController
    {
        private readonly UserManagerModuleContracts.IPortalPermissionGroupsClient pageClient;
        private readonly UserManagerModuleContracts.IPortalPermissionsClient pagePortalPermissionClient;
        private readonly UserManagerModuleContracts.IPermissionGroupsClient pagePermissionGroupClient;
        private readonly UserManagerModuleContracts.IPortalPermissionTypesClient pagePortalPermissionTypeClient;
        public PortalPermissionGroupsController(UserManagerModuleContracts.IPortalPermissionGroupsClient pageClient, UserManagerModuleContracts.IPortalPermissionsClient pagePortalPermissionClient, UserManagerModuleContracts.IPermissionGroupsClient pagePermissionGroupClient, UserManagerModuleContracts.IPortalPermissionTypesClient pagePortalPermissionTypeClient, UserManagerModuleContracts.ITableComboboxSettingsClient tableComboboxSettingsClient, IHttpContextAccessor httpContextAccessor, IMemoryCache cache) : base(tableComboboxSettingsClient, httpContextAccessor, cache)
        {
            this.pageClient = pageClient;
            this.pagePortalPermissionClient = pagePortalPermissionClient;
            this.pagePermissionGroupClient = pagePermissionGroupClient;
            this.pagePortalPermissionTypeClient = pagePortalPermissionTypeClient;
        }

        [ResponseCache(VaryByQueryKeys = new[] { "ic" }, Duration = 30)]
        public async Task<IActionResult> GetImage(string ic)
        {
            return await GetImageResult(pageClient, ic);
        }

        [Route("List")]
        public async Task<IActionResult> List()
        {
            var model = await PrepareModel();
            model.ComboList = await FillPageComboBoxes(model.ComboList);
            SetModelBinder(ref model);
            return View("List", model);
        }

        [Route("List")]
        [HttpPost]
        public async Task<IActionResult> List(PortalPermissionGroupData model)
        {
            ModelBinder(ref model);
            model = await PrepareModel(model);
            model.SelectedItem = new();
            SetModelBinder(ref model);
            return View("List", model);
        }

        [Route("Insert")]
        [HttpPost]
        public async Task<IActionResult> Insert(PortalPermissionGroupData model)
        {
            ModelBinder(ref model);
            var result = await pageClient.PortalPermissionGroupsInsertAsync(model.SelectedItem);
            ClearCache();
            SetModelBinder(ref model);
            return Ok(result);
        }

        [Route("Update")]
        [HttpPost]
        public async Task<IActionResult> Update(PortalPermissionGroupData model)
        {
            ModelBinder(ref model);
            var request = model.SelectedItem;
            var result = await pageClient.PortalPermissionGroupsUpdateAsync(request.PortalPermissionName, request.PermissionGroupName, request.PortalPermissionTypeId, request);
            ClearCache();
            SetModelBinder(ref model);
            return Ok(result);
        }

        [Route("Delete")]
        [HttpPost]
        public async Task<IActionResult> Delete(PortalPermissionGroupData model)
        {
            ModelBinder(ref model);
            var request = model.SelectedItem;
            var result = await pageClient.PortalPermissionGroupsDeleteAsync(request.PortalPermissionName, request.PermissionGroupName, request.PortalPermissionTypeId);
            ClearCache();
            SetModelBinder(ref model);
            return Ok(result);
        }

        [Route("InsertItem")]
        public IActionResult InsertItem(PortalPermissionGroupData model)
        {
            ModelState.Clear();
            ModelBinder(ref model);
            SetModelBinder(ref model);
            model.SelectedItem = new();
            return PartialView("Insert", model);
        }

        [Route("DetailItem")]
        public async Task<IActionResult> DetailItem(PortalPermissionGroupData model)
        {
            ModelBinder(ref model);
            model = await PrepareModel(model);
            model.SelectedItem = model.List.Find(i => i.GetKey() == model.SelectedKey);
            SetModelBinder(ref model);
            return PartialView("Detail", model);
        }

        [Route("UpdateItem")]
        [HttpPost]
        public async Task<IActionResult> UpdateItem(PortalPermissionGroupData model)
        {
            ModelState.Clear();
            ModelBinder(ref model);
            model = await PrepareModel(model);
            model.SelectedItem = model.List.Find(i => i.GetKey() == model.SelectedKey);
            SetModelBinder(ref model);
            return PartialView("Update", model);
        }

        [Route("DeleteItem")]
        [HttpPost]
        public async Task<IActionResult> DeleteItem(PortalPermissionGroupData model)
        {
            ModelBinder(ref model);
            model = await PrepareModel(model);
            model.SelectedItem = model.List.Find(i => i.GetKey() == model.SelectedKey);
            SetModelBinder(ref model);
            return PartialView("Delete", model);
        }

        private async Task<PortalPermissionGroupData> PrepareModel()
        {
            var model = GetModel<PortalPermissionGroupData>();
            model.CurrentPage = 1;
            model.PageSize = PageSize;
            return await PrepareModel(model);
        }

        private async Task<PortalPermissionGroupData> PrepareModel(PortalPermissionGroupData model)
        {
            model.NumberOfRecord = await pageClient.PortalPermissionGroupsCountAsync();
            model.TotalPage = (model.NumberOfRecord + PageSize - 1) / PageSize;
            model.List = (await pageClient.PortalPermissionGroupsListAsync(model.CurrentPage, PageSize)).ToList();
            return model;
        }

        private async Task<Dictionary<string, Dictionary<string, string>>> FillPageComboBoxes(Dictionary<string, Dictionary<string, string>> comboBoxList)
        {
            comboBoxList.Clear();
            comboBoxList.AddRange(await FillComboBoxAsync("PortalPermissions", () => pagePortalPermissionClient.PortalPermissionsListAsync()));
            comboBoxList.AddRange(await FillComboBoxAsync("PermissionGroups", () => pagePermissionGroupClient.PermissionGroupsListAsync()));
            comboBoxList.AddRange(await FillComboBoxAsync("PortalPermissionTypes", () => pagePortalPermissionTypeClient.PortalPermissionTypesListAsync()));
            return comboBoxList;
        }
    }
}