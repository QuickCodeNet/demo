//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using QuickCode.Demo.Portal.Models;
using QuickCode.Demo.Portal.Models.UserManagerModule;
using QuickCode.Demo.Portal.Helpers;
using Microsoft.AspNetCore.Mvc;
using UserManagerModuleContracts = QuickCode.Demo.Common.Nswag.Clients.UserManagerModuleApi.Contracts;
using System.IO;
using Microsoft.AspNetCore.Authorization;
using QuickCode.Demo.Portal.Helpers.Authorization;
using Microsoft.AspNetCore.Http;
using System.Threading;
using System.Threading.Tasks;
using AutoRest.Core.Utilities.Collections;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace QuickCode.Demo.Portal.Controllers.UserManagerModule
{
    public partial class TopicWorkflowsController : BaseController
    {
        [Route("List/{kafkaEventsTopicName}")]
        public async Task<IActionResult> List(string kafkaEventsTopicName)
        {
            var model = GetModel<TopicWorkflowData>();
            model.PageSize = PageSize;
            model.CurrentPage = 1;
            model.NumberOfRecord = (await pageClient.TopicWorkflowsCountAsync());
            model.TotalPage = (model.NumberOfRecord / model.PageSize) +
                              (model.NumberOfRecord % model.PageSize == 0 ? 0 : 1);
            model.ComboList = await FillPageComboBoxes(model.ComboList, kafkaEventsTopicName);
            model.List = new List<UserManagerModuleContracts.TopicWorkflowDto>();
            try
            {
                var listResponse = (await pageClient.TopicWorkflowsGetWorkflowsAsync(kafkaEventsTopicName));
                model.List = listResponse
                    .CastList<UserManagerModuleContracts.TopicWorkflowDto,
                        UserManagerModuleContracts.GetWorkflowsResponseDto>();
            }
            catch (Exception ex)
            {
                model.List = new List<UserManagerModuleContracts.TopicWorkflowDto>();
            }

            SetModelBinder(ref model);
            //return View("List", model);
            return PartialView("ListModal", model);
        }

        [Route("List/{kafkaEventsTopicName}")]
        [HttpPost]
        public async Task<IActionResult> List(TopicWorkflowData model, string kafkaEventsTopicName)
        {
            ModelBinder(ref model);
            model.PageSize = PageSize;
            model.NumberOfRecord = (await pageClient.TopicWorkflowsCountAsync());
            model.TotalPage = (model.NumberOfRecord / model.PageSize) +
                              (model.NumberOfRecord % model.PageSize == 0 ? 0 : 1);
            if (model.CurrentPage == Int32.MaxValue)
            {
                model.CurrentPage = model.TotalPage;
            }

            var listResponse = (await pageClient.TopicWorkflowsGetWorkflowsAsync(kafkaEventsTopicName));
            model.List = listResponse.CastList<UserManagerModuleContracts.TopicWorkflowDto, UserManagerModuleContracts.GetWorkflowsResponseDto>();
            SetModelBinder(ref model);
            model.SelectedItem = new();
            return View("ListModal", model);
        }

        [Route("GetUmlDiagram/{workflowId}")]
        [HttpGet]
        public async Task<IActionResult> GetUmlDiagram(int workflowId)
        {
            using var fileResponse = await pageClient.TopicWorkflowsGetItemDiagramAsync(workflowId);

            if (fileResponse.Stream == null)
            {
                return NotFound("Diagram image not found.");
            }

            var contentType = "image/svg+xml"; 
            if (fileResponse.Headers.TryGetValue("Content-Type", out var values))
            {
                contentType = values.FirstOrDefault() ?? contentType;
            }

            using var memoryStream = new MemoryStream();
            await fileResponse.Stream.CopyToAsync(memoryStream);
            var fileBytes = memoryStream.ToArray(); 
            
            return File(fileBytes, contentType, $"diagram{workflowId}.svg"); 
        }

        [Route("GetUml/{workflowId}")]
        [HttpGet]
        public async Task<IActionResult> GetUml(int workflowId)
        {
            var diagramUml = await pageClient.TopicWorkflowsGetItemUmlAsync(workflowId);
            return Content(diagramUml, "text/plain");
        }

        private async Task<Dictionary<string, Dictionary<string,string>>> FillPageComboBoxes(
            Dictionary<string, Dictionary<string,string>> comboBoxList, string kafkaEventsTopicName)
        {
            comboBoxList.Clear();
            comboBoxList.AddRange(await FillComboBoxAsync("KafkaEvents",
                () => pageKafkaEventClient.KafkaEventsListAsync(), item => item.TopicName == kafkaEventsTopicName));
            return comboBoxList;
        }
    }
}